document.querySelector('mutation-test-report-app').report = {"files":{"/Users/kav/Dev/playground/gleetchy/src/apis/audio.ts":{"language":"typescript","mutants":[{"id":"0","location":{"end":{"column":2,"line":26},"start":{"column":38,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"1","location":{"end":{"column":19,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"3","location":{"end":{"column":4,"line":8},"start":{"column":21,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"5","location":{"end":{"column":14,"line":12},"start":{"column":7,"line":12}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"6","location":{"end":{"column":14,"line":12},"start":{"column":7,"line":12}},"mutatorName":"BooleanLiteral","replacement":"WINDOW","status":"Survived"},{"id":"7","location":{"end":{"column":4,"line":14},"start":{"column":16,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"8","location":{"end":{"column":43,"line":13},"start":{"column":21,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"9","location":{"end":{"column":81,"line":17},"start":{"column":24,"line":17}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"10","location":{"end":{"column":81,"line":17},"start":{"column":24,"line":17}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"11","location":{"end":{"column":46,"line":17},"start":{"column":44,"line":17}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"2","location":{"end":{"column":19,"line":6},"start":{"column":7,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"14","location":{"end":{"column":20,"line":19},"start":{"column":7,"line":19}},"mutatorName":"BooleanLiteral","replacement":"AudioContext","status":"Survived"},{"id":"15","location":{"end":{"column":4,"line":21},"start":{"column":22,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"16","location":{"end":{"column":49,"line":20},"start":{"column":21,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"4","location":{"end":{"column":14,"line":12},"start":{"column":7,"line":12}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"17","location":{"end":{"column":5,"line":31},"start":{"column":32,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"18","location":{"end":{"column":4,"line":31},"start":{"column":49,"line":29}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"20","location":{"end":{"column":35,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"19","location":{"end":{"column":35,"line":30},"start":{"column":7,"line":30}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"21","location":{"end":{"column":17,"line":30},"start":{"column":15,"line":30}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"12","location":{"end":{"column":20,"line":19},"start":{"column":7,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"13","location":{"end":{"column":20,"line":19},"start":{"column":7,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"}],"source":"import { requireWindowWith } from '~/util/env'\n\nlet audioContext: AudioContext\n\nexport const getAudioContext = () => {\n  if (audioContext) {\n    return audioContext\n  }\n\n  const WINDOW = requireWindowWith()\n\n  if (!WINDOW) {\n    throw new Error('Could not access dom')\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const AudioContext = WINDOW.AudioContext || (WINDOW as any).webkitAudioContext\n\n  if (!AudioContext) {\n    throw new Error('No audio context available')\n  }\n\n  audioContext = new AudioContext()\n\n  return audioContext\n}\n\nexport const decodeAudioData = (buffer: ArrayBuffer, context?: AudioContext) =>\n  new Promise<AudioBuffer>((resolve, reject) => {\n    ;(context || getAudioContext()).decodeAudioData(buffer, resolve, reject)\n  })\n"},"/Users/kav/Dev/playground/gleetchy/src/apis/file.ts":{"language":"typescript","mutants":[{"id":"22","location":{"end":{"column":2,"line":22},"start":{"column":28,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"23","location":{"end":{"column":62,"line":7},"start":{"column":36,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"24","location":{"end":{"column":61,"line":7},"start":{"column":37,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"25","location":{"end":{"column":14,"line":9},"start":{"column":7,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"27","location":{"end":{"column":14,"line":9},"start":{"column":7,"line":9}},"mutatorName":"BooleanLiteral","replacement":"WINDOW","status":"Survived"},{"id":"28","location":{"end":{"column":4,"line":11},"start":{"column":16,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"31","location":{"end":{"column":17,"line":13},"start":{"column":7,"line":13}},"mutatorName":"BooleanLiteral","replacement":"fileInput","status":"Survived"},{"id":"30","location":{"end":{"column":17,"line":13},"start":{"column":7,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"32","location":{"end":{"column":4,"line":19},"start":{"column":19,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"33","location":{"end":{"column":54,"line":14},"start":{"column":47,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"34","location":{"end":{"column":34,"line":15},"start":{"column":28,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"36","location":{"end":{"column":36,"line":16},"start":{"column":28,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"35","location":{"end":{"column":42,"line":15},"start":{"column":36,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"37","location":{"end":{"column":56,"line":16},"start":{"column":38,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"38","location":{"end":{"column":37,"line":18},"start":{"column":31,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"39","location":{"end":{"column":2,"line":50},"start":{"column":37,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"40","location":{"end":{"column":13,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"41","location":{"end":{"column":13,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"42","location":{"end":{"column":13,"line":27},"start":{"column":7,"line":27}},"mutatorName":"BooleanLiteral","replacement":"input","status":"Survived"},{"id":"43","location":{"end":{"column":4,"line":29},"start":{"column":15,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"44","location":{"end":{"column":56,"line":28},"start":{"column":37,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"45","location":{"end":{"column":4,"line":49},"start":{"column":51,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"46","location":{"end":{"column":6,"line":40},"start":{"column":28,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"47","location":{"end":{"column":31,"line":36},"start":{"column":20,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"48","location":{"end":{"column":31,"line":36},"start":{"column":20,"line":36}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"50","location":{"end":{"column":31,"line":36},"start":{"column":29,"line":36}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"49","location":{"end":{"column":28,"line":36},"start":{"column":26,"line":36}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"26","location":{"end":{"column":14,"line":9},"start":{"column":7,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"51","location":{"end":{"column":79,"line":36},"start":{"column":40,"line":36}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"29","location":{"end":{"column":17,"line":13},"start":{"column":7,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"52","location":{"end":{"column":78,"line":36},"start":{"column":70,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"53","location":{"end":{"column":23,"line":39},"start":{"column":21,"line":39}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"54","location":{"end":{"column":6,"line":46},"start":{"column":30,"line":42}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"55","location":{"end":{"column":23,"line":45},"start":{"column":21,"line":45}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"56","location":{"end":{"column":2,"line":89},"start":{"column":54,"line":52}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"58","location":{"end":{"column":20,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"57","location":{"end":{"column":4,"line":88},"start":{"column":58,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"61","location":{"end":{"column":6,"line":59},"start":{"column":22,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"62","location":{"end":{"column":53,"line":57},"start":{"column":24,"line":57}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"60","location":{"end":{"column":20,"line":56},"start":{"column":9,"line":56}},"mutatorName":"BooleanLiteral","replacement":"fileReader","status":"Survived"},{"id":"59","location":{"end":{"column":20,"line":56},"start":{"column":9,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"63","location":{"end":{"column":6,"line":64},"start":{"column":35,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"64","location":{"end":{"column":6,"line":85},"start":{"column":34,"line":66}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"65","location":{"end":{"column":22,"line":67},"start":{"column":11,"line":67}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"67","location":{"end":{"column":22,"line":67},"start":{"column":11,"line":67}},"mutatorName":"BooleanLiteral","replacement":"fileReader","status":"Survived"},{"id":"66","location":{"end":{"column":22,"line":67},"start":{"column":11,"line":67}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"68","location":{"end":{"column":8,"line":70},"start":{"column":24,"line":67}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"70","location":{"end":{"column":54,"line":72},"start":{"column":11,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"69","location":{"end":{"column":56,"line":68},"start":{"column":26,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"71","location":{"end":{"column":54,"line":72},"start":{"column":11,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"73","location":{"end":{"column":53,"line":72},"start":{"column":13,"line":72}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"72","location":{"end":{"column":54,"line":72},"start":{"column":11,"line":72}},"mutatorName":"BooleanLiteral","replacement":"(fileReader.result instanceof ArrayBuffer)","status":"Survived"},{"id":"74","location":{"end":{"column":53,"line":72},"start":{"column":13,"line":72}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"75","location":{"end":{"column":8,"line":76},"start":{"column":56,"line":72}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"76","location":{"end":{"column":61,"line":73},"start":{"column":26,"line":73}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"79","location":{"end":{"column":48,"line":95},"start":{"column":45,"line":94}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"78","location":{"end":{"column":48,"line":92},"start":{"column":39,"line":91}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"77","location":{"end":{"column":8,"line":82},"start":{"column":15,"line":78}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { AudioFileData } from '~/types'\nimport { requireWindowWith } from '~/util/env'\n\nlet fileInput: HTMLInputElement\n\nconst getFileInput = () => {\n  const WINDOW = requireWindowWith(['document.createElement'])\n\n  if (!WINDOW) {\n    return undefined\n  }\n\n  if (!fileInput) {\n    fileInput = WINDOW.document.createElement('input')\n    fileInput.setAttribute('type', 'file')\n    fileInput.setAttribute('accept', '.wav, .mp3, .ogg')\n    WINDOW.document.body.appendChild(fileInput)\n    fileInput.style.display = 'none'\n  }\n\n  return fileInput\n}\n\nexport const loadAudioFiles = () => {\n  const input = getFileInput()\n\n  if (!input) {\n    return Promise.reject(new Error('Cannot load files'))\n  }\n\n  return new Promise<File[]>((resolve, reject) => {\n    input.onchange = () => {\n      const { files } = input\n\n      resolve(\n        Array.from(files || []).filter(({ type }) => type.startsWith('audio/')),\n      )\n\n      input.value = ''\n    }\n\n    input.onerror = error => {\n      reject(error)\n\n      input.value = ''\n    }\n\n    input.click()\n  })\n}\n\nexport const readFileToArrayBuffer = (file: File) => {\n  let fileReader: FileReader | null = new FileReader()\n\n  return new Promise<AudioFileData>((resolve, reject) => {\n    if (!fileReader) {\n      reject(new Error('Could not create FileReader'))\n      return\n    }\n\n    fileReader.onerror = error => {\n      reject(error)\n      fileReader = null\n    }\n\n    fileReader.onloadend = () => {\n      if (!fileReader) {\n        reject(new Error('FileReader instance disposed'))\n        return\n      }\n\n      if (!(fileReader.result instanceof ArrayBuffer)) {\n        reject(new Error('Error reading file to ArrayBuffer'))\n        fileReader = null\n        return\n      }\n\n      resolve({\n        buffer: fileReader.result,\n        fileName: file.name,\n        fileType: file.type,\n      })\n\n      fileReader = null\n    }\n\n    fileReader.readAsArrayBuffer(file)\n  })\n}\n\nexport const readFilesToArrayBuffer = (files: File[]) =>\n  Promise.all(files.map(readFileToArrayBuffer))\n\nexport const loadAudioFilesToArrayBuffers = () =>\n  loadAudioFiles().then(readFilesToArrayBuffer)\n"},"/Users/kav/Dev/playground/gleetchy/src/components/hooks/useFileDropRegion.ts":{"language":"typescript","mutants":[{"id":"80","location":{"end":{"column":2,"line":57},"start":{"column":28,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"82","location":{"end":{"column":4,"line":23},"start":{"column":69,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"81","location":{"end":{"column":57,"line":18},"start":{"column":52,"line":18}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"84","location":{"end":{"column":8,"line":23},"start":{"column":6,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"85","location":{"end":{"column":4,"line":28},"start":{"column":71,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"83","location":{"end":{"column":25,"line":22},"start":{"column":21,"line":22}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"87","location":{"end":{"column":8,"line":28},"start":{"column":6,"line":28}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"86","location":{"end":{"column":26,"line":27},"start":{"column":21,"line":27}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"88","location":{"end":{"column":6,"line":39},"start":{"column":14,"line":31}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"89","location":{"end":{"column":28,"line":35},"start":{"column":23,"line":35}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"90","location":{"end":{"column":28,"line":37},"start":{"column":11,"line":37}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"91","location":{"end":{"column":28,"line":37},"start":{"column":11,"line":37}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"93","location":{"end":{"column":7,"line":52},"start":{"column":5,"line":44}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"92","location":{"end":{"column":37,"line":40},"start":{"column":5,"line":40}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"95","location":{"end":{"column":55,"line":53},"start":{"column":5,"line":53}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"94","location":{"end":{"column":6,"line":52},"start":{"column":12,"line":44}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"96","location":{"end":{"column":41,"line":56},"start":{"column":10,"line":56}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useState, useCallback, useMemo, DragEventHandler } from 'react'\nimport { T } from 'ramda'\n\nimport { noop } from '~/util/function'\nimport { cancelReactEvent } from '~/util/event'\n\nexport interface UseFileDropRegionProps {\n  fileFilter?(file: File, index: number, array: File[]): boolean\n  onFiles?(files: File[]): unknown\n  onNoFiles?(): unknown\n}\n\nexport default function useFileDropRegion({\n  fileFilter = T,\n  onFiles = noop,\n  onNoFiles = noop,\n}: UseFileDropRegionProps) {\n  const [isDropActive, setIsDropActive] = useState(false)\n\n  const eventSetDropActive = useCallback<DragEventHandler>(event => {\n    cancelReactEvent(event)\n    setIsDropActive(true)\n  }, [])\n\n  const eventSetDropInactive = useCallback<DragEventHandler>(event => {\n    cancelReactEvent(event)\n    setIsDropActive(false)\n  }, [])\n\n  const onDrop = useCallback<DragEventHandler>(\n    event => {\n      const receivable = Array.from(event.dataTransfer.files).filter(fileFilter)\n\n      cancelReactEvent(event)\n      setIsDropActive(false)\n\n      if (receivable.length) onFiles(receivable)\n      else onNoFiles()\n    },\n    [fileFilter, onFiles, onNoFiles],\n  )\n\n  const eventHandlers = useMemo(\n    () => ({\n      onDrop,\n      onDrag: cancelReactEvent,\n      onDragOver: cancelReactEvent,\n      onDragStart: cancelReactEvent,\n      onDragEnter: eventSetDropActive,\n      onDragLeave: eventSetDropInactive,\n      onDragEnd: eventSetDropInactive,\n    }),\n    [onDrop, eventSetDropActive, eventSetDropInactive],\n  )\n\n  return { isDropActive, eventHandlers }\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/constants/audio.ts":{"language":"typescript","mutants":[{"id":"97","location":{"end":{"column":38,"line":1},"start":{"column":28,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export const MAIN_OUT_ID = 'MAIN_OUT'\nexport const DELAY_UPPER_BOUND = 4\n"},"/Users/kav/Dev/playground/gleetchy/src/lib/offlineInstall.ts":{"language":"typescript","mutants":[{"id":"98","location":{"end":{"column":2,"line":41},"start":{"column":69,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"99","location":{"end":{"column":42,"line":11},"start":{"column":33,"line":11}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"101","location":{"end":{"column":8,"line":36},"start":{"column":55,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"102","location":{"end":{"column":30,"line":16},"start":{"column":13,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"100","location":{"end":{"column":6,"line":37},"start":{"column":18,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"103","location":{"end":{"column":30,"line":16},"start":{"column":13,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"104","location":{"end":{"column":30,"line":16},"start":{"column":13,"line":16}},"mutatorName":"BooleanLiteral","replacement":"installingWorker","status":"Survived"},{"id":"106","location":{"end":{"column":10,"line":35},"start":{"column":73,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"105","location":{"end":{"column":10,"line":18},"start":{"column":32,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"107","location":{"end":{"column":20,"line":28},"start":{"column":13,"line":22}},"mutatorName":"ConditionalExpression","replacement":"case 'installed':","status":"Survived"},{"id":"108","location":{"end":{"column":29,"line":22},"start":{"column":18,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"109","location":{"end":{"column":53,"line":23},"start":{"column":19,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"110","location":{"end":{"column":53,"line":23},"start":{"column":19,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"111","location":{"end":{"column":16,"line":25},"start":{"column":55,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"112","location":{"end":{"column":67,"line":24},"start":{"column":29,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"114","location":{"end":{"column":64,"line":26},"start":{"column":29,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"113","location":{"end":{"column":16,"line":27},"start":{"column":22,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"115","location":{"end":{"column":20,"line":31},"start":{"column":13,"line":29}},"mutatorName":"ConditionalExpression","replacement":"case 'redundant':","status":"Survived"},{"id":"116","location":{"end":{"column":29,"line":29},"start":{"column":18,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"117","location":{"end":{"column":75,"line":30},"start":{"column":27,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"118","location":{"end":{"column":20,"line":33},"start":{"column":13,"line":32}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"119","location":{"end":{"column":6,"line":40},"start":{"column":21,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"120","location":{"end":{"column":64,"line":39},"start":{"column":21,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"121","location":{"end":{"column":51,"line":45},"start":{"column":3,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"122","location":{"end":{"column":51,"line":45},"start":{"column":3,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"123","location":{"end":{"column":43,"line":44},"start":{"column":41,"line":44}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"124","location":{"end":{"column":40,"line":44},"start":{"column":3,"line":44}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"125","location":{"end":{"column":40,"line":44},"start":{"column":3,"line":44}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"127","location":{"end":{"column":40,"line":44},"start":{"column":28,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"126","location":{"end":{"column":27,"line":44},"start":{"column":24,"line":44}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"128","location":{"end":{"column":51,"line":45},"start":{"column":3,"line":45}},"mutatorName":"BooleanLiteral","replacement":"!requireWindowWith(['navigator.serviceWorker'])","status":"Survived"},{"id":"129","location":{"end":{"column":51,"line":45},"start":{"column":4,"line":45}},"mutatorName":"BooleanLiteral","replacement":"requireWindowWith(['navigator.serviceWorker'])","status":"Survived"},{"id":"131","location":{"end":{"column":49,"line":45},"start":{"column":24,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"130","location":{"end":{"column":50,"line":45},"start":{"column":23,"line":45}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"}],"source":"/* eslint-disable no-console */\n/*\n  Install offline service worker\n  from https://github.com/ooade/NextSimpleStarter\n*/\nimport { requireWindowWith } from '~/util/env'\nimport { noop } from '~/util/function'\n\nconst offlineInstall = (serviceWorkerUrl: string, scope: string) => {\n  navigator.serviceWorker\n    .register(serviceWorkerUrl, { scope })\n    .then(reg => {\n      reg.onupdatefound = function regOnUpdateFound() {\n        const installingWorker = reg.installing\n\n        if (!installingWorker) {\n          return\n        }\n\n        installingWorker.onstatechange = function workerOnStateChange() {\n          switch (installingWorker.state) {\n            case 'installed':\n              if (navigator.serviceWorker.controller) {\n                console.log('New or updated content is available.')\n              } else {\n                console.log('Content is now available offline!')\n              }\n              break\n            case 'redundant':\n              console.log('The installing serviceWorker became redundant.')\n              break\n            default:\n              break\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nconst shouldInstall =\n  process.env.NODE_ENV === 'production' &&\n  !!requireWindowWith(['navigator.serviceWorker'])\n\nexport default shouldInstall ? offlineInstall : noop\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/delay/createAudioNode.ts":{"language":"typescript","mutants":[{"id":"132","location":{"end":{"column":2,"line":17},"start":{"column":6,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"133","location":{"end":{"column":57,"line":15},"start":{"column":35,"line":15}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"135","location":{"end":{"column":47,"line":16},"start":{"column":46,"line":16}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"134","location":{"end":{"column":61,"line":16},"start":{"column":35,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"136","location":{"end":{"column":4,"line":51},"start":{"column":74,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"138","location":{"end":{"column":6,"line":41},"start":{"column":24,"line":38}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"137","location":{"end":{"column":59,"line":21},"start":{"column":26,"line":21}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"139","location":{"end":{"column":6,"line":50},"start":{"column":8,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"140","location":{"end":{"column":8,"line":49},"start":{"column":42,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { always, curry } from 'ramda'\n\nimport { DELAY_UPPER_BOUND } from '~/constants/audio'\nimport { GAudioNode } from '~/types'\nimport { connectable } from '~/util/connection'\n\nimport { defaultProps, Props } from './nodeProps'\nimport nodeType from './nodeType'\n\nconst updateWetDry = (\n  wetDryRatio: number,\n  wetGainNode: GainNode,\n  dryGainNode: GainNode,\n) => {\n  Object.assign(wetGainNode.gain, { value: wetDryRatio })\n  Object.assign(dryGainNode.gain, { value: 1 - wetDryRatio })\n}\n\nexport default curry(\n  (audioContext: AudioContext, initProps: Partial<Props>): GAudioNode => {\n    const props: Props = { ...defaultProps, ...initProps }\n    const delayNode = audioContext.createDelay(DELAY_UPPER_BOUND)\n    const inNode = audioContext.createGain()\n    const outNode = audioContext.createGain()\n    const wetGainNode = audioContext.createGain()\n    const dryGainNode = audioContext.createGain()\n\n    inNode.connect(dryGainNode)\n    inNode.connect(delayNode)\n    delayNode.connect(wetGainNode)\n    wetGainNode.connect(outNode)\n    dryGainNode.connect(outNode)\n\n    updateWetDry(props.wetDryRatio, wetGainNode, dryGainNode)\n\n    delayNode.delayTime.value = props.delayTime\n\n    return connectable({\n      getInNode: always(inNode),\n      getOutNode: always(outNode),\n    })({\n      type: nodeType,\n\n      set(newProps: Partial<Props> = {}) {\n        Object.assign(props, newProps)\n\n        delayNode.delayTime.value = props.delayTime\n        updateWetDry(props.wetDryRatio, wetGainNode, dryGainNode)\n      },\n    })\n  },\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/delay/nodeProps.ts":{"language":"typescript","mutants":[{"id":"141","location":{"end":{"column":2,"line":4},"start":{"column":43,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"export const defaultProps = Object.freeze({\n  delayTime: 0.6,\n  wetDryRatio: 0.5,\n})\n\nexport type Props = Mutable<typeof defaultProps>\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/delay/nodeType.ts":{"language":"typescript","mutants":[{"id":"142","location":{"end":{"column":36,"line":1},"start":{"column":16,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export default 'AUDIO_EFFECT_DELAY'\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/eq3/createAudioNode.ts":{"language":"typescript","mutants":[{"id":"143","location":{"end":{"column":4,"line":48},"start":{"column":74,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"144","location":{"end":{"column":59,"line":11},"start":{"column":26,"line":11}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"146","location":{"end":{"column":43,"line":17},"start":{"column":42,"line":17}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"145","location":{"end":{"column":6,"line":20},"start":{"column":33,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"147","location":{"end":{"column":43,"line":18},"start":{"column":42,"line":18}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"148","location":{"end":{"column":45,"line":19},"start":{"column":44,"line":19}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"149","location":{"end":{"column":30,"line":22},"start":{"column":20,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"150","location":{"end":{"column":29,"line":25},"start":{"column":20,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"152","location":{"end":{"column":6,"line":40},"start":{"column":24,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"151","location":{"end":{"column":32,"line":29},"start":{"column":21,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"154","location":{"end":{"column":8,"line":46},"start":{"column":42,"line":43}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"153","location":{"end":{"column":6,"line":47},"start":{"column":8,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { always, curry } from 'ramda'\n\nimport { GAudioNode } from '~/types'\nimport { connectable } from '~/util/connection'\n\nimport { defaultProps, Props } from './nodeProps'\nimport nodeType from './nodeType'\n\nexport default curry(\n  (audioContext: AudioContext, initProps: Partial<Props>): GAudioNode => {\n    const props: Props = { ...defaultProps, ...initProps }\n    const lowNode = audioContext.createBiquadFilter()\n    const midNode = audioContext.createBiquadFilter()\n    const highNode = audioContext.createBiquadFilter()\n\n    const transferProps = () => {\n      lowNode.gain.value = props.lowGain * 40\n      midNode.gain.value = props.midGain * 40\n      highNode.gain.value = props.highGain * 40\n    }\n\n    lowNode.type = 'lowshelf'\n    lowNode.frequency.value = 320\n\n    midNode.type = 'peaking'\n    midNode.frequency.value = 1000\n    midNode.Q.value = 0.5\n\n    highNode.type = 'highshelf'\n    highNode.frequency.value = 3200\n\n    highNode.connect(midNode)\n    midNode.connect(lowNode)\n\n    transferProps()\n\n    return connectable({\n      getInNode: always(highNode),\n      getOutNode: always(lowNode),\n    })({\n      type: nodeType,\n\n      set(newProps: Partial<Props> = {}) {\n        Object.assign(props, newProps)\n        transferProps()\n      },\n    })\n  },\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/eq3/nodeProps.ts":{"language":"typescript","mutants":[{"id":"155","location":{"end":{"column":2,"line":5},"start":{"column":43,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"export const defaultProps = Object.freeze({\n  highGain: 0,\n  lowGain: 0,\n  midGain: 0,\n})\n\nexport type Props = Mutable<typeof defaultProps>\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/eq3/nodeType.ts":{"language":"typescript","mutants":[{"id":"156","location":{"end":{"column":34,"line":1},"start":{"column":16,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export default 'AUDIO_EFFECT_EQ3'\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/reverb/createAudioNode.ts":{"language":"typescript","mutants":[{"id":"157","location":{"end":{"column":2,"line":18},"start":{"column":6,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"158","location":{"end":{"column":57,"line":16},"start":{"column":35,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"159","location":{"end":{"column":61,"line":17},"start":{"column":35,"line":17}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"160","location":{"end":{"column":47,"line":17},"start":{"column":46,"line":17}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"162","location":{"end":{"column":4,"line":59},"start":{"column":74,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"161","location":{"end":{"column":2,"line":25},"start":{"column":72,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"163","location":{"end":{"column":59,"line":29},"start":{"column":26,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"164","location":{"end":{"column":6,"line":46},"start":{"column":61,"line":44}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"165","location":{"end":{"column":6,"line":51},"start":{"column":24,"line":48}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"167","location":{"end":{"column":8,"line":57},"start":{"column":42,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"166","location":{"end":{"column":6,"line":58},"start":{"column":8,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { always, curry } from 'ramda'\n\nimport { decodeAudioData } from '~/apis/audio'\nimport reverbImpulse from '~/assets/media/impulse_reverb.wav'\nimport { GAudioNode } from '~/types'\nimport { connectable } from '~/util/connection'\n\nimport { defaultProps, Props } from './nodeProps'\nimport nodeType from './nodeType'\n\nconst updateWetDry = (\n  wetDryRatio: number,\n  wetGainNode: GainNode,\n  dryGainNode: GainNode,\n) => {\n  Object.assign(wetGainNode.gain, { value: wetDryRatio })\n  Object.assign(dryGainNode.gain, { value: 1 - wetDryRatio })\n}\n\nconst loadImpulse = async (audioContext: AudioContext, url: string) => {\n  const response = await fetch(url)\n  const arrayBuffer = await response.arrayBuffer()\n\n  return decodeAudioData(arrayBuffer, audioContext)\n}\n\nexport default curry(\n  (audioContext: AudioContext, initProps: Partial<Props>): GAudioNode => {\n    const props: Props = { ...defaultProps, ...initProps }\n    const reverbNode = audioContext.createConvolver()\n    const inNode = audioContext.createGain()\n    const outNode = audioContext.createGain()\n    const wetGainNode = audioContext.createGain()\n    const dryGainNode = audioContext.createGain()\n\n    inNode.connect(dryGainNode)\n    inNode.connect(reverbNode)\n    reverbNode.connect(wetGainNode)\n    wetGainNode.connect(outNode)\n    dryGainNode.connect(outNode)\n\n    updateWetDry(props.wetDryRatio, wetGainNode, dryGainNode)\n\n    loadImpulse(audioContext, reverbImpulse).then(buffer => {\n      reverbNode.buffer = buffer\n    })\n\n    return connectable({\n      getInNode: always(inNode),\n      getOutNode: always(outNode),\n    })({\n      type: nodeType,\n\n      set(newProps: Partial<Props> = {}) {\n        Object.assign(props, newProps)\n        updateWetDry(props.wetDryRatio, wetGainNode, dryGainNode)\n      },\n    })\n  },\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/instruments/loop/createAudioNode.ts":{"language":"typescript","mutants":[{"id":"170","location":{"end":{"column":4,"line":129},"start":{"column":78,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"171","location":{"end":{"column":52,"line":12},"start":{"column":19,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"175","location":{"end":{"column":28,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"176","location":{"end":{"column":28,"line":28},"start":{"column":11,"line":28}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"177","location":{"end":{"column":28,"line":28},"start":{"column":11,"line":28}},"mutatorName":"BooleanLiteral","replacement":"bufferSourceNode","status":"Survived"},{"id":"178","location":{"end":{"column":8,"line":30},"start":{"column":30,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"172","location":{"end":{"column":6,"line":17},"start":{"column":49,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"173","location":{"end":{"column":26,"line":21},"start":{"column":21,"line":21}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"179","location":{"end":{"column":23,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"174","location":{"end":{"column":6,"line":43},"start":{"column":51,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"181","location":{"end":{"column":23,"line":34},"start":{"column":11,"line":34}},"mutatorName":"BooleanLiteral","replacement":"audioBuffer","status":"Survived"},{"id":"182","location":{"end":{"column":8,"line":36},"start":{"column":25,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"180","location":{"end":{"column":23,"line":34},"start":{"column":11,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"183","location":{"end":{"column":53,"line":40},"start":{"column":52,"line":40}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"184","location":{"end":{"column":49,"line":41},"start":{"column":48,"line":41}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"187","location":{"end":{"column":28,"line":46},"start":{"column":11,"line":46}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"185","location":{"end":{"column":6,"line":52},"start":{"column":42,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"186","location":{"end":{"column":28,"line":46},"start":{"column":11,"line":46}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"190","location":{"end":{"column":6,"line":74},"start":{"column":43,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"189","location":{"end":{"column":8,"line":48},"start":{"column":30,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"188","location":{"end":{"column":28,"line":46},"start":{"column":11,"line":46}},"mutatorName":"BooleanLiteral","replacement":"bufferSourceNode","status":"Survived"},{"id":"192","location":{"end":{"column":23,"line":59},"start":{"column":11,"line":59}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"191","location":{"end":{"column":23,"line":59},"start":{"column":11,"line":59}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"193","location":{"end":{"column":23,"line":59},"start":{"column":11,"line":59}},"mutatorName":"BooleanLiteral","replacement":"audioBuffer","status":"Survived"},{"id":"195","location":{"end":{"column":35,"line":65},"start":{"column":31,"line":65}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"194","location":{"end":{"column":8,"line":61},"start":{"column":25,"line":59}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"196","location":{"end":{"column":20,"line":71},"start":{"column":11,"line":71}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"197","location":{"end":{"column":20,"line":71},"start":{"column":11,"line":71}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"200","location":{"end":{"column":6,"line":79},"start":{"column":47,"line":76}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"199","location":{"end":{"column":46,"line":72},"start":{"column":45,"line":72}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"},{"id":"198","location":{"end":{"column":8,"line":73},"start":{"column":22,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"201","location":{"end":{"column":6,"line":128},"start":{"column":8,"line":79}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"202","location":{"end":{"column":8,"line":89},"start":{"column":14,"line":82}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"203","location":{"end":{"column":22,"line":83},"start":{"column":13,"line":83}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"208","location":{"end":{"column":23,"line":92},"start":{"column":13,"line":92}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"204","location":{"end":{"column":22,"line":83},"start":{"column":13,"line":83}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"205","location":{"end":{"column":10,"line":85},"start":{"column":24,"line":83}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"206","location":{"end":{"column":25,"line":87},"start":{"column":21,"line":87}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"207","location":{"end":{"column":8,"line":98},"start":{"column":14,"line":91}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"209","location":{"end":{"column":23,"line":92},"start":{"column":13,"line":92}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"210","location":{"end":{"column":23,"line":92},"start":{"column":13,"line":92}},"mutatorName":"BooleanLiteral","replacement":"isPlaying","status":"Survived"},{"id":"211","location":{"end":{"column":10,"line":94},"start":{"column":25,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"216","location":{"end":{"column":44,"line":119},"start":{"column":11,"line":118}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"212","location":{"end":{"column":26,"line":96},"start":{"column":21,"line":96}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"213","location":{"end":{"column":8,"line":127},"start":{"column":42,"line":100}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"214","location":{"end":{"column":39,"line":101},"start":{"column":27,"line":101}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"215","location":{"end":{"column":51,"line":114},"start":{"column":21,"line":114}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"218","location":{"end":{"column":51,"line":118},"start":{"column":49,"line":118}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"217","location":{"end":{"column":44,"line":119},"start":{"column":11,"line":118}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"219","location":{"end":{"column":36,"line":118},"start":{"column":33,"line":118}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"221","location":{"end":{"column":10,"line":122},"start":{"column":11,"line":120}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"220","location":{"end":{"column":34,"line":119},"start":{"column":31,"line":119}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"222","location":{"end":{"column":51,"line":122},"start":{"column":20,"line":122}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"223","location":{"end":{"column":51,"line":122},"start":{"column":20,"line":122}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"224","location":{"end":{"column":34,"line":122},"start":{"column":32,"line":122}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"225","location":{"end":{"column":10,"line":124},"start":{"column":53,"line":122}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"226","location":{"end":{"column":32,"line":124},"start":{"column":20,"line":124}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"227","location":{"end":{"column":32,"line":124},"start":{"column":20,"line":124}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"228","location":{"end":{"column":32,"line":124},"start":{"column":20,"line":124}},"mutatorName":"BooleanLiteral","replacement":"audioBuffer","status":"Survived"},{"id":"229","location":{"end":{"column":10,"line":126},"start":{"column":34,"line":124}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { always, curry } from 'ramda'\n\nimport createEq3Node from '~/nodes/audioEffects/eq3/createAudioNode'\nimport { InstrumentNode } from '~/types'\nimport { connectable } from '~/util/connection'\n\nimport { defaultProps, Props } from './nodeProps'\nimport nodeType from './nodeType'\n\nexport default curry(\n  (audioContext: AudioContext, initProps: Partial<Props>): InstrumentNode => {\n    const props = { ...defaultProps, ...initProps }\n    const eq3Node = createEq3Node(audioContext, {\n      lowGain: props.lowGain,\n      midGain: props.midGain,\n      highGain: props.highGain,\n    })\n    const gainNode = audioContext.createGain()\n    const getGainNode = always(gainNode)\n\n    let isPlaying = false\n    let bufferSourceNode: AudioBufferSourceNode | null = null\n\n    eq3Node.connect(gainNode)\n    gainNode.gain.value = props.gain\n\n    const transferPropsToBufferSourceNode = () => {\n      if (!bufferSourceNode) {\n        return\n      }\n\n      const { audioBuffer } = props\n\n      if (!audioBuffer) {\n        return\n      }\n\n      const { duration } = audioBuffer\n\n      bufferSourceNode.loopStart = props.loopStart * duration\n      bufferSourceNode.loopEnd = props.loopEnd * duration\n      bufferSourceNode.playbackRate.value = props.playbackRate\n    }\n\n    const removeBufferSourceNode = () => {\n      if (!bufferSourceNode) {\n        return\n      }\n\n      bufferSourceNode.disconnect(eq3Node.getInNode())\n      bufferSourceNode = null\n    }\n\n    const replaceBufferSourceNode = () => {\n      removeBufferSourceNode()\n\n      const { loopStart, audioBuffer } = props\n\n      if (!audioBuffer) {\n        return\n      }\n\n      bufferSourceNode = audioContext.createBufferSource()\n      bufferSourceNode.buffer = audioBuffer\n      bufferSourceNode.loop = true\n\n      transferPropsToBufferSourceNode()\n\n      bufferSourceNode.connect(eq3Node.getInNode())\n\n      if (isPlaying) {\n        bufferSourceNode.start(0, loopStart * audioBuffer.duration)\n      }\n    }\n\n    return connectable<Props, InstrumentNode>({\n      getInNode: getGainNode,\n      getOutNode: getGainNode,\n    })({\n      type: nodeType,\n\n      play() {\n        if (isPlaying) {\n          return\n        }\n\n        isPlaying = true\n        replaceBufferSourceNode()\n      },\n\n      stop() {\n        if (!isPlaying) {\n          return\n        }\n\n        isPlaying = false\n        removeBufferSourceNode()\n      },\n\n      set(newProps: Partial<Props> = {}) {\n        const prevProps = { ...props }\n\n        Object.assign(props, newProps)\n\n        const {\n          gain,\n          audioBuffer,\n          loopStart,\n          midGain,\n          lowGain,\n          highGain,\n        } = props\n\n        eq3Node.set({ midGain, lowGain, highGain })\n        gainNode.gain.value = gain\n\n        if (\n          prevProps.audioBuffer !== audioBuffer ||\n          prevProps.loopStart !== loopStart\n        ) {\n          replaceBufferSourceNode()\n        } else if (audioBuffer && bufferSourceNode) {\n          transferPropsToBufferSourceNode()\n        } else if (!audioBuffer) {\n          removeBufferSourceNode()\n        }\n      },\n    })\n  },\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/reverb/nodeProps.ts":{"language":"typescript","mutants":[{"id":"168","location":{"end":{"column":2,"line":3},"start":{"column":43,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"export const defaultProps = Object.freeze({\n  wetDryRatio: 0.5,\n})\n\nexport type Props = Mutable<typeof defaultProps>\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/audioEffects/reverb/nodeType.ts":{"language":"typescript","mutants":[{"id":"169","location":{"end":{"column":37,"line":1},"start":{"column":16,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export default 'AUDIO_EFFECT_REVERB'\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/instruments/loop/nodeProps.ts":{"language":"typescript","mutants":[{"id":"231","location":{"end":{"column":15,"line":6},"start":{"column":13,"line":6}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"230","location":{"end":{"column":2,"line":12},"start":{"column":43,"line":3}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"232","location":{"end":{"column":15,"line":7},"start":{"column":13,"line":7}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"}],"source":"import { defaultProps as eq3DefaultProps } from '~/nodes/audioEffects/eq3/nodeProps'\n\nexport const defaultProps = Object.freeze({\n  ...eq3DefaultProps,\n  audioBuffer: undefined,\n  fileName: '',\n  fileType: '',\n  gain: 0.5,\n  loopEnd: 1,\n  loopStart: 0,\n  playbackRate: 1,\n})\n\nexport interface Props\n  extends Mutable<Omit<typeof defaultProps, 'audioBuffer'>> {\n  audioBuffer: AudioBuffer | undefined\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioEngine/actions.ts":{"language":"typescript","mutants":[{"id":"234","location":{"end":{"column":3,"line":5},"start":{"column":45,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"235","location":{"end":{"column":2,"line":5},"start":{"column":82,"line":3}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"236","location":{"end":{"column":36,"line":4},"start":{"column":9,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { AudioEngineClearEventsAction } from './types'\n\nexport const clearAudioEngineEventsAction = (): AudioEngineClearEventsAction => ({\n  type: 'AUDIO_ENGINE_CLEAR_EVENTS',\n})\n"},"/Users/kav/Dev/playground/gleetchy/src/nodes/instruments/loop/nodeType.ts":{"language":"typescript","mutants":[{"id":"233","location":{"end":{"column":33,"line":1},"start":{"column":16,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export default 'INSTRUMENT_LOOP'\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioEngine/reducer.ts":{"language":"typescript","mutants":[{"id":"238","location":{"end":{"column":34,"line":14},"start":{"column":32,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"237","location":{"end":{"column":36,"line":14},"start":{"column":22,"line":14}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"240","location":{"end":{"column":26,"line":25},"start":{"column":10,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"239","location":{"end":{"column":2,"line":44},"start":{"column":39,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"241","location":{"end":{"column":29,"line":26},"start":{"column":10,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"242","location":{"end":{"column":41,"line":27},"start":{"column":10,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"243","location":{"end":{"column":26,"line":28},"start":{"column":10,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"244","location":{"end":{"column":29,"line":29},"start":{"column":10,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"246","location":{"end":{"column":33,"line":31},"start":{"column":10,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"245","location":{"end":{"column":38,"line":30},"start":{"column":10,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"248","location":{"end":{"column":32,"line":32},"start":{"column":10,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"250","location":{"end":{"column":8,"line":35},"start":{"column":43,"line":33}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"247","location":{"end":{"column":6,"line":36},"start":{"column":5,"line":32}},"mutatorName":"ConditionalExpression","replacement":"case 'GLOBAL_PLAYBACK_STOP':","status":"Survived"},{"id":"249","location":{"end":{"column":6,"line":36},"start":{"column":34,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"252","location":{"end":{"column":37,"line":37},"start":{"column":10,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"254","location":{"end":{"column":37,"line":39},"start":{"column":13,"line":39}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"251","location":{"end":{"column":9,"line":40},"start":{"column":5,"line":37}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_ENGINE_CLEAR_EVENTS':","status":"Survived"},{"id":"253","location":{"end":{"column":8,"line":40},"start":{"column":43,"line":38}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"257","location":{"end":{"column":19,"line":42},"start":{"column":5,"line":41}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"256","location":{"end":{"column":61,"line":39},"start":{"column":59,"line":39}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"255","location":{"end":{"column":37,"line":39},"start":{"column":13,"line":39}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"}],"source":"import { Reducer } from 'redux'\nimport produce from 'immer'\n\nimport { AudioFilesAction } from '../audioFiles/types'\nimport { ConnectionsAction } from '../connections/types'\nimport { GlobalPlaybackAction } from '../globalPlayback/types'\nimport { AudioNodesAction } from '../audioNodes/types'\nimport { AudioEngineAction, AudioEngineEvent } from './types'\n\nexport interface AudioEngineState {\n  events: AudioEngineEvent[]\n}\n\nconst defaultState = { events: [] }\n\nconst audioEngineReducer: Reducer<\n  AudioEngineState,\n  | AudioNodesAction\n  | AudioFilesAction\n  | ConnectionsAction\n  | GlobalPlaybackAction\n  | AudioEngineAction\n> = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'AUDIO_NODE_ADD':\n    case 'AUDIO_NODE_REMOVE':\n    case 'AUDIO_NODE_UPDATE_AUDIO_PROPS':\n    case 'CONNECTION_ADD':\n    case 'CONNECTION_REMOVE':\n    case 'AUDIO_FILE_DECODE_COMPLETE':\n    case 'GLOBAL_PLAYBACK_START':\n    case 'GLOBAL_PLAYBACK_STOP': {\n      return produce(state, draftState => {\n        draftState.events.push(action as AudioEngineEvent)\n      })\n    }\n    case 'AUDIO_ENGINE_CLEAR_EVENTS':\n      return produce(state, draftState => {\n        if (draftState.events.length) draftState.events = []\n      })\n    default:\n      return state\n  }\n}\n\nexport default audioEngineReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioEngine/selectors.ts":{"language":"typescript","mutants":[{"id":"258","location":{"end":{"column":80,"line":5},"start":{"column":34,"line":5}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"259","location":{"end":{"column":25,"line":9},"start":{"column":3,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { createSelector } from 'reselect'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nconst audioEngineStateSelector = (state: ApplicationState) => state.audioEngine\n\nexport const audioEngineEventsSelector = createSelector(\n  audioEngineStateSelector,\n  ({ events }) => events,\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioFiles/actions.ts":{"language":"typescript","mutants":[{"id":"260","location":{"end":{"column":2,"line":46},"start":{"column":6,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"261","location":{"end":{"column":4,"line":40},"start":{"column":7,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"263","location":{"end":{"column":22,"line":27},"start":{"column":16,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"266","location":{"end":{"column":8,"line":37},"start":{"column":16,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"262","location":{"end":{"column":6,"line":29},"start":{"column":42,"line":26}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"267","location":{"end":{"column":71,"line":35},"start":{"column":15,"line":35}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"264","location":{"end":{"column":38,"line":28},"start":{"column":13,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"265","location":{"end":{"column":6,"line":39},"start":{"column":45,"line":33}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"268","location":{"end":{"column":49,"line":35},"start":{"column":25,"line":35}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"269","location":{"end":{"column":36,"line":35},"start":{"column":26,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"272","location":{"end":{"column":4,"line":45},"start":{"column":19,"line":40}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"270","location":{"end":{"column":48,"line":35},"start":{"column":38,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"275","location":{"end":{"column":38,"line":43},"start":{"column":13,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"271","location":{"end":{"column":41,"line":38},"start":{"column":13,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"274","location":{"end":{"column":29,"line":42},"start":{"column":16,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"273","location":{"end":{"column":6,"line":44},"start":{"column":42,"line":41}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"276","location":{"end":{"column":2,"line":77},"start":{"column":38,"line":48}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"277","location":{"end":{"column":2,"line":77},"start":{"column":6,"line":50}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"279","location":{"end":{"column":20,"line":52},"start":{"column":14,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"280","location":{"end":{"column":34,"line":53},"start":{"column":11,"line":53}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"278","location":{"end":{"column":4,"line":54},"start":{"column":38,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"281","location":{"end":{"column":4,"line":71},"start":{"column":7,"line":58}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"284","location":{"end":{"column":14,"line":61},"start":{"column":9,"line":61}},"mutatorName":"BooleanLiteral","replacement":"file","status":"Survived"},{"id":"282","location":{"end":{"column":14,"line":61},"start":{"column":9,"line":61}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"283","location":{"end":{"column":14,"line":61},"start":{"column":9,"line":61}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"285","location":{"end":{"column":6,"line":63},"start":{"column":16,"line":61}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"288","location":{"end":{"column":28,"line":66},"start":{"column":16,"line":66}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"286","location":{"end":{"column":39,"line":62},"start":{"column":23,"line":62}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"287","location":{"end":{"column":6,"line":68},"start":{"column":43,"line":65}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"289","location":{"end":{"column":39,"line":67},"start":{"column":13,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"291","location":{"end":{"column":6,"line":75},"start":{"column":40,"line":72}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"290","location":{"end":{"column":4,"line":76},"start":{"column":19,"line":71}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"292","location":{"end":{"column":29,"line":73},"start":{"column":16,"line":73}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"293","location":{"end":{"column":36,"line":74},"start":{"column":13,"line":74}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"295","location":{"end":{"column":2,"line":104},"start":{"column":6,"line":81}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"294","location":{"end":{"column":2,"line":104},"start":{"column":39,"line":79}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"298","location":{"end":{"column":34,"line":84},"start":{"column":11,"line":84}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"296","location":{"end":{"column":4,"line":85},"start":{"column":38,"line":82}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"297","location":{"end":{"column":20,"line":83},"start":{"column":14,"line":83}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"300","location":{"end":{"column":6,"line":95},"start":{"column":43,"line":92}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"299","location":{"end":{"column":4,"line":98},"start":{"column":7,"line":89}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"301","location":{"end":{"column":38,"line":93},"start":{"column":16,"line":93}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"305","location":{"end":{"column":29,"line":100},"start":{"column":16,"line":100}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"302","location":{"end":{"column":39,"line":94},"start":{"column":13,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"303","location":{"end":{"column":4,"line":103},"start":{"column":19,"line":98}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"306","location":{"end":{"column":36,"line":101},"start":{"column":13,"line":101}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"304","location":{"end":{"column":6,"line":102},"start":{"column":40,"line":99}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { head, pick } from 'ramda'\nimport { Dispatch } from 'redux'\n\nimport { decodeAudioData } from '~/apis/audio'\nimport {\n  loadAudioFilesToArrayBuffers,\n  readFileToArrayBuffer,\n} from '~/apis/file'\nimport { AudioFileData } from '~/types'\n\nimport {\n  AudioFileDecodeCompleteAction,\n  AudioFileDecodeErrorAction,\n  AudioFileDecodeStartAction,\n  AudioFileLoadCompleteAction,\n  AudioFileLoadErrorAction,\n  AudioFileLoadStartAction,\n} from './types'\n\nconst decodeFileBuffer = async (\n  dispatch: Dispatch,\n  id: string,\n  file: AudioFileData,\n) => {\n  try {\n    dispatch<AudioFileDecodeStartAction>({\n      payload: { id },\n      type: 'AUDIO_FILE_DECODE_START',\n    })\n\n    const audioBuffer = await decodeAudioData(file.buffer)\n\n    dispatch<AudioFileDecodeCompleteAction>({\n      payload: {\n        file: { ...pick(['fileName', 'fileType'], file), audioBuffer },\n        id,\n      },\n      type: 'AUDIO_FILE_DECODE_COMPLETE',\n    })\n  } catch (error) {\n    dispatch<AudioFileDecodeErrorAction>({\n      payload: { id, error },\n      type: 'AUDIO_FILE_DECODE_ERROR',\n    })\n  }\n}\n\nexport const selectAudioFileAction = (id: string) => async (\n  dispatch: Dispatch,\n) => {\n  dispatch<AudioFileLoadStartAction>({\n    payload: { id },\n    type: 'AUDIO_FILE_LOAD_START',\n  })\n\n  let file: AudioFileData | undefined\n\n  try {\n    file = head(await loadAudioFilesToArrayBuffers())\n\n    if (!file) {\n      throw new Error('No file loaded')\n    }\n\n    dispatch<AudioFileLoadCompleteAction>({\n      payload: { id, file },\n      type: 'AUDIO_FILE_LOAD_COMPLETE',\n    })\n\n    decodeFileBuffer(dispatch, id, file)\n  } catch (error) {\n    dispatch<AudioFileLoadErrorAction>({\n      payload: { id, error },\n      type: 'AUDIO_FILE_LOAD_ERROR',\n    })\n  }\n}\n\nexport const receiveAudioFileAction = (id: string, file: File) => async (\n  dispatch: Dispatch,\n) => {\n  dispatch<AudioFileLoadStartAction>({\n    payload: { id },\n    type: 'AUDIO_FILE_LOAD_START',\n  })\n\n  let fileData: AudioFileData | undefined\n\n  try {\n    fileData = await readFileToArrayBuffer(file)\n\n    dispatch<AudioFileLoadCompleteAction>({\n      payload: { id, file: fileData },\n      type: 'AUDIO_FILE_LOAD_COMPLETE',\n    })\n\n    decodeFileBuffer(dispatch, id, fileData)\n  } catch (error) {\n    dispatch<AudioFileLoadErrorAction>({\n      payload: { id, error },\n      type: 'AUDIO_FILE_LOAD_ERROR',\n    })\n  }\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioFiles/reducer.ts":{"language":"typescript","mutants":[{"id":"307","location":{"end":{"column":2,"line":22},"start":{"column":39,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"308","location":{"end":{"column":18,"line":18},"start":{"column":16,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"309","location":{"end":{"column":17,"line":21},"start":{"column":15,"line":21}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"312","location":{"end":{"column":33,"line":29},"start":{"column":10,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"310","location":{"end":{"column":2,"line":92},"start":{"column":6,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"311","location":{"end":{"column":8,"line":36},"start":{"column":5,"line":29}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_LOAD_START':","status":"Survived"},{"id":"313","location":{"end":{"column":8,"line":36},"start":{"column":14,"line":30}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"314","location":{"end":{"column":45,"line":32},"start":{"column":26,"line":32}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"315","location":{"end":{"column":48,"line":33},"start":{"column":29,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"320","location":{"end":{"column":12,"line":45},"start":{"column":32,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"317","location":{"end":{"column":36,"line":37},"start":{"column":10,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"321","location":{"end":{"column":53,"line":43},"start":{"column":17,"line":43}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"323","location":{"end":{"column":50,"line":43},"start":{"column":48,"line":43}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"316","location":{"end":{"column":8,"line":49},"start":{"column":5,"line":37}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_LOAD_COMPLETE':","status":"Survived"},{"id":"318","location":{"end":{"column":8,"line":49},"start":{"column":14,"line":38}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"322","location":{"end":{"column":53,"line":43},"start":{"column":17,"line":43}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"324","location":{"end":{"column":31,"line":44},"start":{"column":21,"line":44}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"319","location":{"end":{"column":10,"line":46},"start":{"column":16,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"325","location":{"end":{"column":30,"line":44},"start":{"column":22,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"326","location":{"end":{"column":45,"line":47},"start":{"column":26,"line":47}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"328","location":{"end":{"column":8,"line":58},"start":{"column":5,"line":50}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_LOAD_ERROR':","status":"Survived"},{"id":"327","location":{"end":{"column":48,"line":48},"start":{"column":29,"line":48}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"330","location":{"end":{"column":8,"line":58},"start":{"column":14,"line":51}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"329","location":{"end":{"column":33,"line":50},"start":{"column":10,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"332","location":{"end":{"column":48,"line":57},"start":{"column":29,"line":57}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"331","location":{"end":{"column":10,"line":56},"start":{"column":21,"line":53}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"333","location":{"end":{"column":8,"line":66},"start":{"column":5,"line":59}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_DECODE_START':","status":"Survived"},{"id":"334","location":{"end":{"column":35,"line":59},"start":{"column":10,"line":59}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"335","location":{"end":{"column":8,"line":66},"start":{"column":14,"line":60}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"336","location":{"end":{"column":47,"line":62},"start":{"column":28,"line":62}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"337","location":{"end":{"column":49,"line":63},"start":{"column":30,"line":63}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"338","location":{"end":{"column":8,"line":79},"start":{"column":5,"line":67}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_DECODE_COMPLETE':","status":"Survived"},{"id":"339","location":{"end":{"column":38,"line":67},"start":{"column":10,"line":67}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"340","location":{"end":{"column":8,"line":79},"start":{"column":14,"line":68}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"341","location":{"end":{"column":47,"line":70},"start":{"column":28,"line":70}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"342","location":{"end":{"column":49,"line":71},"start":{"column":30,"line":71}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"344","location":{"end":{"column":12,"line":77},"start":{"column":32,"line":74}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"343","location":{"end":{"column":10,"line":78},"start":{"column":16,"line":72}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"346","location":{"end":{"column":53,"line":75},"start":{"column":17,"line":75}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"345","location":{"end":{"column":53,"line":75},"start":{"column":17,"line":75}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"347","location":{"end":{"column":50,"line":75},"start":{"column":48,"line":75}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"348","location":{"end":{"column":8,"line":88},"start":{"column":5,"line":80}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_DECODE_ERROR':","status":"Survived"},{"id":"349","location":{"end":{"column":35,"line":80},"start":{"column":10,"line":80}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"350","location":{"end":{"column":8,"line":88},"start":{"column":14,"line":81}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"351","location":{"end":{"column":10,"line":86},"start":{"column":23,"line":83}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"352","location":{"end":{"column":49,"line":87},"start":{"column":30,"line":87}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"353","location":{"end":{"column":19,"line":90},"start":{"column":5,"line":89}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"}],"source":"import { omit, without } from 'ramda'\nimport { Reducer } from 'redux'\n\nimport { AudioFileData } from '~/types'\n\nimport { AudioFilesAction } from './types'\n\nexport interface AudioFilesState {\n  decodeErrors: { [key: string]: Error }\n  decodingIds: string[]\n  files: { [key: string]: AudioFileData }\n  loadErrors: { [key: string]: Error }\n  loadingIds: string[]\n}\n\nconst defaultState: AudioFilesState = {\n  decodeErrors: {},\n  decodingIds: [],\n  files: {},\n  loadErrors: {},\n  loadingIds: [],\n}\n\nconst audioFilesReducer: Reducer<AudioFilesState, AudioFilesAction> = (\n  state = defaultState,\n  action,\n) => {\n  switch (action.type) {\n    case 'AUDIO_FILE_LOAD_START':\n      return {\n        ...state,\n        loadErrors: omit([action.payload.id], state.loadErrors),\n        loadingIds: without([action.payload.id], state.loadingIds).concat(\n          action.payload.id,\n        ),\n      }\n    case 'AUDIO_FILE_LOAD_COMPLETE':\n      return {\n        ...state,\n        files: {\n          ...state.files,\n          [action.payload.id]: {\n            ...(state.files[action.payload.id] || {}),\n            ...omit(['buffer'], action.payload.file),\n          },\n        },\n        loadErrors: omit([action.payload.id], state.loadErrors),\n        loadingIds: without([action.payload.id], state.loadingIds),\n      }\n    case 'AUDIO_FILE_LOAD_ERROR':\n      return {\n        ...state,\n        loadErrors: {\n          ...state.loadErrors,\n          [action.payload.id]: action.payload.error,\n        },\n        loadingIds: without([action.payload.id], state.loadingIds),\n      }\n    case 'AUDIO_FILE_DECODE_START':\n      return {\n        ...state,\n        decodeErrors: omit([action.payload.id], state.decodeErrors),\n        decodingIds: without([action.payload.id], state.decodingIds).concat(\n          action.payload.id,\n        ),\n      }\n    case 'AUDIO_FILE_DECODE_COMPLETE':\n      return {\n        ...state,\n        decodeErrors: omit([action.payload.id], state.decodeErrors),\n        decodingIds: without([action.payload.id], state.decodingIds),\n        files: {\n          ...state.files,\n          [action.payload.id]: {\n            ...(state.files[action.payload.id] || {}),\n            ...action.payload.file,\n          },\n        },\n      }\n    case 'AUDIO_FILE_DECODE_ERROR':\n      return {\n        ...state,\n        decodeErrors: {\n          ...state.decodeErrors,\n          [action.payload.id]: action.payload.error,\n        },\n        decodingIds: without([action.payload.id], state.decodingIds),\n      }\n    default:\n      return state\n  }\n}\n\nexport default audioFilesReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioFiles/selectors.ts":{"language":"typescript","mutants":[{"id":"354","location":{"end":{"column":78,"line":6},"start":{"column":33,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"355","location":{"end":{"column":15,"line":10},"start":{"column":8,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"356","location":{"end":{"column":20,"line":15},"start":{"column":8,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"357","location":{"end":{"column":60,"line":20},"start":{"column":3,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"358","location":{"end":{"column":59,"line":20},"start":{"column":13,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { prop } from 'ramda'\nimport { createSelector } from 'reselect'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nconst audioFilesStateSelector = (state: ApplicationState) => state.audioFiles\n\nexport const audioFilesSelector = createSelector(\n  audioFilesStateSelector,\n  prop('files'),\n)\n\nexport const audioFilesLoadingSelector = createSelector(\n  audioFilesStateSelector,\n  prop('loadingIds'),\n)\n\nexport const audioFilesErrorSelector = createSelector(\n  audioFilesStateSelector,\n  state => ({ ...state.loadErrors, ...state.decodeErrors }),\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioNodes/actions.ts":{"language":"typescript","mutants":[{"id":"360","location":{"end":{"column":2,"line":15},"start":{"column":74,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"359","location":{"end":{"column":3,"line":15},"start":{"column":35,"line":12}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"362","location":{"end":{"column":25,"line":14},"start":{"column":9,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"361","location":{"end":{"column":20,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"364","location":{"end":{"column":68,"line":19},"start":{"column":32,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"363","location":{"end":{"column":66,"line":17},"start":{"column":31,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"365","location":{"end":{"column":64,"line":21},"start":{"column":30,"line":21}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"366","location":{"end":{"column":3,"line":26},"start":{"column":38,"line":23}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"368","location":{"end":{"column":18,"line":24},"start":{"column":12,"line":24}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"370","location":{"end":{"column":3,"line":34},"start":{"column":48,"line":28}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"367","location":{"end":{"column":2,"line":26},"start":{"column":78,"line":23}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"369","location":{"end":{"column":28,"line":25},"start":{"column":9,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"371","location":{"end":{"column":2,"line":34},"start":{"column":40,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"372","location":{"end":{"column":30,"line":32},"start":{"column":12,"line":32}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"373","location":{"end":{"column":40,"line":33},"start":{"column":9,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"374","location":{"end":{"column":3,"line":42},"start":{"column":43,"line":36}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"375","location":{"end":{"column":2,"line":42},"start":{"column":35,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"376","location":{"end":{"column":25,"line":40},"start":{"column":12,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"377","location":{"end":{"column":34,"line":41},"start":{"column":9,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { nodeType as loopType } from '~/nodes/instruments/loop'\nimport { nodeType as delayType } from '~/nodes/audioEffects/delay'\nimport { nodeType as reverbType } from '~/nodes/audioEffects/reverb'\n\nimport {\n  AudioNodeAddAction,\n  AudioNodeRemoveAction,\n  AudioNodeUpdateLabelAction,\n  AudioNodeUpdateAudioPropsAction,\n} from './types'\n\nexport const addAudioNodeAction = (type: string): AudioNodeAddAction => ({\n  payload: { type },\n  type: 'AUDIO_NODE_ADD',\n})\n\nexport const addDelayAction = () => addAudioNodeAction(delayType)\n\nexport const addReverbAction = () => addAudioNodeAction(reverbType)\n\nexport const addLoopAction = () => addAudioNodeAction(loopType)\n\nexport const removeAudioNodeAction = (id: string): AudioNodeRemoveAction => ({\n  payload: { id },\n  type: 'AUDIO_NODE_REMOVE',\n})\n\nexport const updateAudioNodeAudioPropsAction = (\n  id: string,\n  audioProps: object,\n): AudioNodeUpdateAudioPropsAction => ({\n  payload: { id, audioProps },\n  type: 'AUDIO_NODE_UPDATE_AUDIO_PROPS',\n})\n\nexport const updateAudioNodeLabelAction = (\n  id: string,\n  label: string,\n): AudioNodeUpdateLabelAction => ({\n  payload: { id, label },\n  type: 'AUDIO_NODE_UPDATE_LABEL',\n})\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioNodes/reducer.ts":{"language":"typescript","mutants":[{"id":"378","location":{"end":{"column":4,"line":41},"start":{"column":41,"line":37}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"380","location":{"end":{"column":32,"line":42},"start":{"column":3,"line":42}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"381","location":{"end":{"column":30,"line":42},"start":{"column":28,"line":42}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"379","location":{"end":{"column":70,"line":39},"start":{"column":26,"line":39}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"386","location":{"end":{"column":45,"line":52},"start":{"column":21,"line":52}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"382","location":{"end":{"column":2,"line":73},"start":{"column":66,"line":45}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"383","location":{"end":{"column":8,"line":53},"start":{"column":5,"line":47}},"mutatorName":"ConditionalExpression","replacement":"case delayNodeType:","status":"Survived"},{"id":"385","location":{"end":{"column":20,"line":51},"start":{"column":16,"line":51}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"384","location":{"end":{"column":8,"line":53},"start":{"column":14,"line":48}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"389","location":{"end":{"column":8,"line":60},"start":{"column":14,"line":55}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"388","location":{"end":{"column":6,"line":61},"start":{"column":26,"line":54}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"387","location":{"end":{"column":6,"line":61},"start":{"column":5,"line":54}},"mutatorName":"ConditionalExpression","replacement":"case reverbNodeType:","status":"Survived"},{"id":"392","location":{"end":{"column":6,"line":69},"start":{"column":5,"line":62}},"mutatorName":"ConditionalExpression","replacement":"case loopNodeType:","status":"Survived"},{"id":"391","location":{"end":{"column":46,"line":59},"start":{"column":21,"line":59}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"390","location":{"end":{"column":20,"line":58},"start":{"column":16,"line":58}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"393","location":{"end":{"column":6,"line":69},"start":{"column":24,"line":62}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"394","location":{"end":{"column":8,"line":68},"start":{"column":14,"line":63}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"395","location":{"end":{"column":20,"line":66},"start":{"column":16,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"396","location":{"end":{"column":44,"line":67},"start":{"column":21,"line":67}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"397","location":{"end":{"column":18,"line":71},"start":{"column":5,"line":70}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"399","location":{"end":{"column":20,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"401","location":{"end":{"column":20,"line":78},"start":{"column":7,"line":78}},"mutatorName":"BooleanLiteral","replacement":"newNodeState","status":"Survived"},{"id":"398","location":{"end":{"column":2,"line":87},"start":{"column":73,"line":75}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"400","location":{"end":{"column":20,"line":78},"start":{"column":7,"line":78}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"402","location":{"end":{"column":4,"line":86},"start":{"column":56,"line":80}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"403","location":{"end":{"column":6,"line":85},"start":{"column":33,"line":82}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"405","location":{"end":{"column":44,"line":95},"start":{"column":5,"line":94}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_NODE_ADD':","status":"Survived"},{"id":"404","location":{"end":{"column":2,"line":139},"start":{"column":39,"line":92}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"406","location":{"end":{"column":26,"line":94},"start":{"column":10,"line":94}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"408","location":{"end":{"column":29,"line":96},"start":{"column":10,"line":96}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"409","location":{"end":{"column":8,"line":109},"start":{"column":43,"line":97}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"407","location":{"end":{"column":9,"line":109},"start":{"column":5,"line":96}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_NODE_REMOVE':","status":"Survived"},{"id":"410","location":{"end":{"column":32,"line":100},"start":{"column":13,"line":100}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"411","location":{"end":{"column":32,"line":100},"start":{"column":13,"line":100}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"413","location":{"end":{"column":33,"line":103},"start":{"column":19,"line":103}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"414","location":{"end":{"column":33,"line":103},"start":{"column":19,"line":103}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"412","location":{"end":{"column":33,"line":103},"start":{"column":11,"line":103}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"415","location":{"end":{"column":30,"line":103},"start":{"column":27,"line":103}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"417","location":{"end":{"column":34,"line":106},"start":{"column":13,"line":106}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"416","location":{"end":{"column":34,"line":106},"start":{"column":13,"line":106}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"418","location":{"end":{"column":31,"line":106},"start":{"column":30,"line":106}},"mutatorName":"EqualityOperator","replacement":"<=","status":"Survived"},{"id":"420","location":{"end":{"column":34,"line":106},"start":{"column":32,"line":106}},"mutatorName":"UnaryOperator","replacement":"+1","status":"Survived"},{"id":"419","location":{"end":{"column":31,"line":106},"start":{"column":30,"line":106}},"mutatorName":"EqualityOperator","replacement":">=","status":"Survived"},{"id":"422","location":{"end":{"column":9,"line":117},"start":{"column":5,"line":110}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_NODE_UPDATE_AUDIO_PROPS':","status":"Survived"},{"id":"421","location":{"end":{"column":10,"line":108},"start":{"column":36,"line":106}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"423","location":{"end":{"column":41,"line":110},"start":{"column":10,"line":110}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"426","location":{"end":{"column":21,"line":114},"start":{"column":13,"line":114}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"424","location":{"end":{"column":8,"line":117},"start":{"column":43,"line":111}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"425","location":{"end":{"column":21,"line":114},"start":{"column":13,"line":114}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"428","location":{"end":{"column":9,"line":123},"start":{"column":5,"line":118}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_NODE_UPDATE_LABEL':","status":"Survived"},{"id":"427","location":{"end":{"column":10,"line":116},"start":{"column":23,"line":114}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"430","location":{"end":{"column":8,"line":123},"start":{"column":43,"line":119}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"431","location":{"end":{"column":21,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"429","location":{"end":{"column":35,"line":118},"start":{"column":10,"line":118}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"434","location":{"end":{"column":38,"line":124},"start":{"column":10,"line":124}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"433","location":{"end":{"column":9,"line":135},"start":{"column":5,"line":124}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_FILE_DECODE_COMPLETE':","status":"Survived"},{"id":"432","location":{"end":{"column":21,"line":122},"start":{"column":13,"line":122}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"435","location":{"end":{"column":8,"line":135},"start":{"column":43,"line":125}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"436","location":{"end":{"column":21,"line":129},"start":{"column":13,"line":129}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"439","location":{"end":{"column":19,"line":137},"start":{"column":5,"line":136}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"437","location":{"end":{"column":21,"line":129},"start":{"column":13,"line":129}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"438","location":{"end":{"column":10,"line":134},"start":{"column":23,"line":129}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import produce from 'immer'\nimport { Reducer } from 'redux'\n\nimport {\n  defaultProps as delayDefaultProps,\n  nodeType as delayNodeType,\n  NodeProps as DelayNodeProps,\n} from '~/nodes/audioEffects/delay'\nimport {\n  defaultProps as reverbDefaultProps,\n  nodeType as reverbNodeType,\n  NodeProps as ReverbNodeProps,\n} from '~/nodes/audioEffects/reverb'\nimport {\n  defaultProps as loopDefaultProps,\n  nodeType as loopNodeType,\n  NodeProps as LoopNodeProps,\n} from '~/nodes/instruments/loop'\nimport initialNodes from '~/state/defaultNodes'\nimport { prefixedId } from '~/util/id'\nimport { pickObjectKeys } from '~/util/object'\nimport { AudioNodeState, ImmutableAudioNodeMeta } from '~/types'\n\nimport { AudioFileDecodeCompleteAction } from '../audioFiles/types'\nimport { AudioNodesAction } from './types'\n\ntype NodeState = AudioNodeState<\n  LoopNodeProps | DelayNodeProps | ReverbNodeProps | {}\n>\n\nexport interface AudioNodesState {\n  byId: { [key: string]: NodeState }\n  orderedMeta: ImmutableAudioNodeMeta[]\n}\n\nconst defaultState: AudioNodesState = initialNodes.reduce(\n  (acc: AudioNodesState, instrument) => {\n    acc.byId[instrument.id] = instrument\n    acc.orderedMeta.push({ id: instrument.id, type: instrument.type })\n    return acc\n  },\n  { byId: {}, orderedMeta: [] },\n)\n\nconst getNewNodeState = (type: string): AudioNodeState | null => {\n  switch (type) {\n    case delayNodeType:\n      return {\n        type,\n        id: prefixedId(delayNodeType),\n        label: 'DX',\n        audioProps: { ...delayDefaultProps },\n      }\n    case reverbNodeType: {\n      return {\n        type,\n        id: prefixedId(reverbNodeType),\n        label: `RX`,\n        audioProps: { ...reverbDefaultProps },\n      }\n    }\n    case loopNodeType: {\n      return {\n        type,\n        id: prefixedId(loopNodeType),\n        label: 'LX',\n        audioProps: { ...loopDefaultProps },\n      }\n    }\n    default:\n      return null\n  }\n}\n\nconst addNode = (state: AudioNodesState, { type }: { type: string }) => {\n  const newNodeState = getNewNodeState(type)\n\n  if (!newNodeState) return state\n\n  return produce<AudioNodesState>(state, draftState => {\n    draftState.byId[newNodeState.id] = newNodeState\n    draftState.orderedMeta.push({\n      id: newNodeState.id,\n      type: newNodeState.type,\n    })\n  })\n}\n\nconst audioNodesReducer: Reducer<\n  AudioNodesState,\n  AudioNodesAction | AudioFileDecodeCompleteAction\n> = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'AUDIO_NODE_ADD':\n      return addNode(state, action.payload)\n    case 'AUDIO_NODE_REMOVE':\n      return produce(state, draftState => {\n        const { id } = action.payload\n\n        if (draftState.byId[id]) delete draftState.byId[id]\n\n        const orderedMetaIndex = draftState.orderedMeta.findIndex(\n          meta => meta.id === id,\n        )\n\n        if (orderedMetaIndex > -1) {\n          draftState.orderedMeta.splice(orderedMetaIndex, 1)\n        }\n      })\n    case 'AUDIO_NODE_UPDATE_AUDIO_PROPS':\n      return produce(state, draftState => {\n        const existing = draftState.byId[action.payload.id]\n\n        if (existing) {\n          Object.assign(existing.audioProps, action.payload.audioProps)\n        }\n      })\n    case 'AUDIO_NODE_UPDATE_LABEL':\n      return produce(state, draftState => {\n        const existing = draftState.byId[action.payload.id]\n\n        if (existing) existing.label = action.payload.label\n      })\n    case 'AUDIO_FILE_DECODE_COMPLETE':\n      return produce(state, draftState => {\n        const { id, file } = action.payload\n        const existing = draftState.byId[id]\n\n        if (existing) {\n          Object.assign(\n            existing.audioProps,\n            pickObjectKeys(existing.audioProps)(file),\n          )\n        }\n      })\n    default:\n      return state\n  }\n}\n\nexport default audioNodesReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/audioNodes/selectors.ts":{"language":"typescript","mutants":[{"id":"440","location":{"end":{"column":78,"line":9},"start":{"column":33,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"441","location":{"end":{"column":22,"line":13},"start":{"column":3,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"442","location":{"end":{"column":29,"line":20},"start":{"column":3,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"443","location":{"end":{"column":36,"line":25},"start":{"column":3,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"444","location":{"end":{"column":37,"line":30},"start":{"column":3,"line":30}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"445","location":{"end":{"column":30,"line":35},"start":{"column":3,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"446","location":{"end":{"column":64,"line":40},"start":{"column":3,"line":40}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"447","location":{"end":{"column":63,"line":40},"start":{"column":44,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"448","location":{"end":{"column":4,"line":51},"start":{"column":35,"line":47}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"451","location":{"end":{"column":4,"line":61},"start":{"column":36,"line":58}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"449","location":{"end":{"column":35,"line":50},"start":{"column":21,"line":50}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"450","location":{"end":{"column":4,"line":61},"start":{"column":3,"line":58}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"452","location":{"end":{"column":74,"line":59},"start":{"column":24,"line":59}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"454","location":{"end":{"column":70,"line":60},"start":{"column":20,"line":60}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"453","location":{"end":{"column":73,"line":59},"start":{"column":33,"line":59}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"455","location":{"end":{"column":69,"line":60},"start":{"column":29,"line":60}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"456","location":{"end":{"column":4,"line":71},"start":{"column":3,"line":68}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"458","location":{"end":{"column":70,"line":69},"start":{"column":20,"line":69}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"457","location":{"end":{"column":4,"line":71},"start":{"column":28,"line":68}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"459","location":{"end":{"column":69,"line":69},"start":{"column":29,"line":69}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { createSelector } from 'reselect'\n\nimport { AudioNodeMeta } from '~/types'\nimport { MAIN_OUT_ID } from '~/constants/audio'\nimport { hasConnectionTo, isInstrument, isAudioEffect } from '~/util/audio'\nimport { ApplicationState } from '~/state/configureStore'\nimport { connectionsSelector } from '~/state/connections/selectors'\n\nconst audioNodesStateSelector = (state: ApplicationState) => state.audioNodes\n\nexport const audioNodesSelector = createSelector(\n  audioNodesStateSelector,\n  state => state.byId,\n)\n\n// TODO: Better naming\n\nexport const immutableNodesMetaSelector = createSelector(\n  audioNodesStateSelector,\n  state => state.orderedMeta,\n)\n\nexport const immutableInstrumentsMetaSelector = createSelector(\n  immutableNodesMetaSelector,\n  meta => meta.filter(isInstrument),\n)\n\nexport const immutableAudioEffectsMetaSelector = createSelector(\n  immutableNodesMetaSelector,\n  meta => meta.filter(isAudioEffect),\n)\n\nexport const mainOutNodeSelector = createSelector(\n  audioNodesSelector,\n  nodes => nodes[MAIN_OUT_ID],\n)\n\nexport const mainOutMetaSelector = createSelector(\n  mainOutNodeSelector,\n  ({ id, type, label }): AudioNodeMeta => ({ id, type, label }),\n)\n\nexport const activeAudioNodeIdsSelector = createSelector(\n  immutableNodesMetaSelector,\n  connectionsSelector,\n  mainOutNodeSelector,\n  (meta, connections, mainOut) => {\n    const connectedToMain = hasConnectionTo(connections, mainOut.id)\n\n    return meta.map(({ id }) => id).filter(connectedToMain)\n  },\n)\n\nexport const connectableSourcesSelector = createSelector(\n  audioNodesSelector,\n  immutableInstrumentsMetaSelector,\n  immutableAudioEffectsMetaSelector,\n  (nodes, instruments, effects) => [\n    ...instruments.map(meta => ({ ...meta, label: nodes[meta.id].label })),\n    ...effects.map(meta => ({ ...meta, label: nodes[meta.id].label })),\n  ],\n)\n\nexport const connectableTargetsSelector = createSelector(\n  audioNodesSelector,\n  immutableAudioEffectsMetaSelector,\n  mainOutMetaSelector,\n  (nodes, effects, out) => [\n    ...effects.map(meta => ({ ...meta, label: nodes[meta.id].label })),\n    out,\n  ],\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/configureStore.ts":{"language":"typescript","mutants":[{"id":"460","location":{"end":{"column":28,"line":18},"start":{"column":21,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"462","location":{"end":{"column":6,"line":51},"start":{"column":21,"line":44}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"461","location":{"end":{"column":4,"line":54},"start":{"column":31,"line":40}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { applyMiddleware, combineReducers, createStore, Store } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport thunk from 'redux-thunk'\n\nimport audioEngine, { AudioEngineState } from './audioEngine/reducer'\nimport { AudioEngineAction } from './audioEngine/types'\nimport audioFiles, { AudioFilesState } from './audioFiles/reducer'\nimport { AudioFilesAction } from './audioFiles/types'\nimport connections, { ConnectionsState } from './connections/reducer'\nimport { ConnectionsAction } from './connections/types'\nimport globalPlayback, { GlobalPlaybackState } from './globalPlayback/reducer'\nimport { GlobalPlaybackAction } from './globalPlayback/types'\nimport audioNodes, { AudioNodesState } from './audioNodes/reducer'\nimport { AudioNodesAction } from './audioNodes/types'\nimport ui, { UIState } from './ui/reducer'\nimport { UIAction } from './ui/types'\n\nconst middlewares = [thunk]\nconst composeEnhancers = composeWithDevTools({})\n\nexport interface ApplicationState {\n  audioEngine: AudioEngineState\n  audioFiles: AudioFilesState\n  audioNodes: AudioNodesState\n  connections: ConnectionsState\n  globalPlayback: GlobalPlaybackState\n  ui: UIState\n}\n\nexport type ApplicationAction =\n  | AudioEngineAction\n  | AudioFilesAction\n  | AudioNodesAction\n  | ConnectionsAction\n  | GlobalPlaybackAction\n  | UIAction\n\nexport type ApplicationStore = Store<ApplicationState, ApplicationAction>\n\nexport const configureStore = (\n  initialState: Partial<ApplicationState> = {},\n): ApplicationStore =>\n  createStore(\n    combineReducers({\n      audioEngine,\n      audioFiles,\n      audioNodes,\n      connections,\n      globalPlayback,\n      ui,\n    }),\n    initialState,\n    composeEnhancers(applyMiddleware(...middlewares)),\n  )\n"},"/Users/kav/Dev/playground/gleetchy/src/state/connections/actions.ts":{"language":"typescript","mutants":[{"id":"463","location":{"end":{"column":3,"line":15},"start":{"column":36,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"466","location":{"end":{"column":25,"line":14},"start":{"column":9,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"465","location":{"end":{"column":28,"line":13},"start":{"column":12,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"464","location":{"end":{"column":2,"line":15},"start":{"column":28,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"467","location":{"end":{"column":3,"line":23},"start":{"column":39,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"468","location":{"end":{"column":2,"line":23},"start":{"column":31,"line":20}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"470","location":{"end":{"column":28,"line":22},"start":{"column":9,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"469","location":{"end":{"column":28,"line":21},"start":{"column":12,"line":21}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"471","location":{"end":{"column":2,"line":39},"start":{"column":39,"line":25}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"474","location":{"end":{"column":15,"line":34},"start":{"column":7,"line":34}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"473","location":{"end":{"column":48,"line":31},"start":{"column":22,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"472","location":{"end":{"column":2,"line":39},"start":{"column":6,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"475","location":{"end":{"column":15,"line":34},"start":{"column":7,"line":34}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"476","location":{"end":{"column":4,"line":36},"start":{"column":17,"line":34}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"477","location":{"end":{"column":4,"line":38},"start":{"column":10,"line":36}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { Dispatch } from 'redux'\n\nimport { ApplicationState } from '~/state/configureStore'\nimport { isSameConnection } from '~/util/audio'\n\nimport { connectionsSelector } from './selectors'\nimport { ConnectionAddAction, ConnectionRemoveAction } from './types'\n\nexport const addConnectionAction = (\n  fromId: string,\n  toId: string,\n): ConnectionAddAction => ({\n  payload: { fromId, toId },\n  type: 'CONNECTION_ADD',\n})\n\nexport const removeConnectionAction = (\n  fromId: string,\n  toId: string,\n): ConnectionRemoveAction => ({\n  payload: { fromId, toId },\n  type: 'CONNECTION_REMOVE',\n})\n\nexport const toggleConnectionAction = (fromId: string, toId: string) => (\n  dispatch: Dispatch,\n  getState: () => ApplicationState,\n) => {\n  const connections = connectionsSelector(getState())\n  const existing = connections.find(\n    isSameConnection({ from: fromId, to: toId }),\n  )\n\n  if (existing) {\n    dispatch<ConnectionRemoveAction>(removeConnectionAction(fromId, toId))\n  } else {\n    dispatch<ConnectionAddAction>(addConnectionAction(fromId, toId))\n  }\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/state/connections/reducer.ts":{"language":"typescript","mutants":[{"id":"478","location":{"end":{"column":2,"line":20},"start":{"column":40,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"479","location":{"end":{"column":62,"line":18},"start":{"column":3,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"481","location":{"end":{"column":56,"line":23},"start":{"column":22,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"480","location":{"end":{"column":62,"line":19},"start":{"column":3,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"482","location":{"end":{"column":55,"line":23},"start":{"column":11,"line":23}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"483","location":{"end":{"column":25,"line":23},"start":{"column":19,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"484","location":{"end":{"column":47,"line":23},"start":{"column":43,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"487","location":{"end":{"column":8,"line":40},"start":{"column":7,"line":33}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"485","location":{"end":{"column":2,"line":41},"start":{"column":6,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"486","location":{"end":{"column":60,"line":29},"start":{"column":44,"line":29}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"488","location":{"end":{"column":10,"line":39},"start":{"column":9,"line":35}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"489","location":{"end":{"column":46,"line":38},"start":{"column":45,"line":38}},"mutatorName":"ArithmeticOperator","replacement":"*","status":"Survived"},{"id":"490","location":{"end":{"column":2,"line":50},"start":{"column":6,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"491","location":{"end":{"column":60,"line":47},"start":{"column":44,"line":47}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"492","location":{"end":{"column":39,"line":49},"start":{"column":29,"line":49}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"494","location":{"end":{"column":75,"line":56},"start":{"column":33,"line":56}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"495","location":{"end":{"column":75,"line":56},"start":{"column":51,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"493","location":{"end":{"column":2,"line":59},"start":{"column":6,"line":55}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"496","location":{"end":{"column":75,"line":56},"start":{"column":51,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"497","location":{"end":{"column":65,"line":56},"start":{"column":63,"line":56}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"498","location":{"end":{"column":62,"line":56},"start":{"column":51,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"499","location":{"end":{"column":62,"line":56},"start":{"column":51,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"500","location":{"end":{"column":59,"line":56},"start":{"column":56,"line":56}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"503","location":{"end":{"column":72,"line":56},"start":{"column":69,"line":56}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"501","location":{"end":{"column":75,"line":56},"start":{"column":66,"line":56}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"502","location":{"end":{"column":75,"line":56},"start":{"column":66,"line":56}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"505","location":{"end":{"column":50,"line":67},"start":{"column":5,"line":66}},"mutatorName":"ConditionalExpression","replacement":"case 'CONNECTION_ADD':","status":"Survived"},{"id":"504","location":{"end":{"column":2,"line":75},"start":{"column":39,"line":64}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"506","location":{"end":{"column":26,"line":66},"start":{"column":10,"line":66}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"507","location":{"end":{"column":53,"line":69},"start":{"column":5,"line":68}},"mutatorName":"ConditionalExpression","replacement":"case 'CONNECTION_REMOVE':","status":"Survived"},{"id":"508","location":{"end":{"column":29,"line":68},"start":{"column":10,"line":68}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"511","location":{"end":{"column":19,"line":73},"start":{"column":5,"line":72}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"},{"id":"509","location":{"end":{"column":62,"line":71},"start":{"column":5,"line":70}},"mutatorName":"ConditionalExpression","replacement":"case 'AUDIO_NODE_REMOVE':","status":"Survived"},{"id":"510","location":{"end":{"column":29,"line":70},"start":{"column":10,"line":70}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { allPass, propEq, without } from 'ramda'\nimport { Reducer } from 'redux'\n\nimport { nodeColorPool } from '~/style/color'\nimport { AudioNodeConnection } from '~/types'\n\nimport defaultNodes from '../defaultNodes'\nimport { AudioNodeRemoveAction } from '../audioNodes/types'\nimport { ConnectionDescriptor, ConnectionsAction } from './types'\n\nexport type ConnectionsState = AudioNodeConnection[]\n\nconst mainOut = defaultNodes[0]\nconst loop1 = defaultNodes[1]\nconst loop2 = defaultNodes[2]\n\nconst defaultState: ConnectionsState = [\n  { from: loop1.id, to: mainOut.id, color: nodeColorPool[0] },\n  { from: loop2.id, to: mainOut.id, color: nodeColorPool[1] },\n]\n\nconst connectionIs = ({ fromId, toId }: ConnectionDescriptor) =>\n  allPass([propEq('from', fromId), propEq('to', toId)])\n\nconst addConnection = (\n  state: ConnectionsState,\n  { fromId, toId }: ConnectionDescriptor,\n) => {\n  const existing = state.find(connectionIs({ fromId, toId }))\n\n  return existing\n    ? state\n    : [\n        ...state,\n        {\n          from: fromId,\n          to: toId,\n          color: nodeColorPool[state.length % nodeColorPool.length],\n        },\n      ]\n}\n\nconst removeConnection = (\n  state: ConnectionsState,\n  { fromId, toId }: ConnectionDescriptor,\n) => {\n  const existing = state.find(connectionIs({ fromId, toId }))\n\n  return existing ? without([existing], state) : state\n}\n\nconst removeAllConnectionsForId = (\n  state: ConnectionsState,\n  { id }: { id: string },\n) => {\n  const toRemove = state.filter(({ from, to }) => from === id || to === id)\n\n  return toRemove.length ? without(toRemove, state) : state\n}\n\nconst connectionsReducer: Reducer<\n  ConnectionsState,\n  ConnectionsAction | AudioNodeRemoveAction\n> = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'CONNECTION_ADD':\n      return addConnection(state, action.payload)\n    case 'CONNECTION_REMOVE':\n      return removeConnection(state, action.payload)\n    case 'AUDIO_NODE_REMOVE':\n      return removeAllConnectionsForId(state, action.payload)\n    default:\n      return state\n  }\n}\n\nexport default connectionsReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/connections/selectors.ts":{"language":"typescript","mutants":[{"id":"512","location":{"end":{"column":80,"line":6},"start":{"column":34,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { identity } from 'ramda'\nimport { createSelector } from 'reselect'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nconst connectionsStateSelector = (state: ApplicationState) => state.connections\n\nexport const connectionsSelector = createSelector(\n  connectionsStateSelector,\n  identity,\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/defaultNodes.ts":{"language":"typescript","mutants":[{"id":"513","location":{"end":{"column":2,"line":52},"start":{"column":7,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"516","location":{"end":{"column":26,"line":14},"start":{"column":11,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"514","location":{"end":{"column":4,"line":15},"start":{"column":3,"line":10}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"515","location":{"end":{"column":18,"line":12},"start":{"column":12,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"517","location":{"end":{"column":4,"line":21},"start":{"column":3,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"518","location":{"end":{"column":26,"line":17},"start":{"column":9,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"523","location":{"end":{"column":16,"line":24},"start":{"column":12,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"519","location":{"end":{"column":16,"line":18},"start":{"column":12,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"520","location":{"end":{"column":41,"line":19},"start":{"column":17,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"521","location":{"end":{"column":4,"line":27},"start":{"column":3,"line":22}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"522","location":{"end":{"column":26,"line":23},"start":{"column":9,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"524","location":{"end":{"column":41,"line":25},"start":{"column":17,"line":25}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"525","location":{"end":{"column":4,"line":33},"start":{"column":3,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"526","location":{"end":{"column":25,"line":29},"start":{"column":9,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"527","location":{"end":{"column":16,"line":30},"start":{"column":12,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"528","location":{"end":{"column":42,"line":31},"start":{"column":17,"line":31}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"531","location":{"end":{"column":16,"line":36},"start":{"column":12,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"530","location":{"end":{"column":29,"line":35},"start":{"column":9,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"529","location":{"end":{"column":4,"line":39},"start":{"column":3,"line":34}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"532","location":{"end":{"column":42,"line":37},"start":{"column":17,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"533","location":{"end":{"column":4,"line":45},"start":{"column":3,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"534","location":{"end":{"column":31,"line":41},"start":{"column":9,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"535","location":{"end":{"column":16,"line":42},"start":{"column":12,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"536","location":{"end":{"column":43,"line":43},"start":{"column":17,"line":43}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"537","location":{"end":{"column":4,"line":51},"start":{"column":3,"line":46}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"538","location":{"end":{"column":26,"line":47},"start":{"column":9,"line":47}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"539","location":{"end":{"column":16,"line":48},"start":{"column":12,"line":48}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"540","location":{"end":{"column":43,"line":49},"start":{"column":17,"line":49}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { MAIN_OUT_ID } from '~/constants/audio'\nimport * as delay from '~/nodes/audioEffects/delay'\nimport * as reverb from '~/nodes/audioEffects/reverb'\nimport * as loop from '~/nodes/instruments/loop'\nimport { AudioNodeState } from '~/types'\n\nconst defaultNodes: AudioNodeState<\n  delay.NodeProps | reverb.NodeProps | loop.NodeProps | {}\n>[] = [\n  {\n    id: MAIN_OUT_ID,\n    label: 'Main',\n    audioProps: {},\n    type: 'AUDIO_CONTEXT',\n  },\n  {\n    id: 'looper-default0',\n    label: 'L0',\n    audioProps: { ...loop.defaultProps },\n    type: loop.nodeType,\n  },\n  {\n    id: 'looper-default1',\n    label: 'L1',\n    audioProps: { ...loop.defaultProps },\n    type: loop.nodeType,\n  },\n  {\n    id: 'delay-default0',\n    label: 'D0',\n    audioProps: { ...delay.defaultProps },\n    type: delay.nodeType,\n  },\n  {\n    id: '​​​​delay-default1',\n    label: 'D1',\n    audioProps: { ...delay.defaultProps },\n    type: delay.nodeType,\n  },\n  {\n    id: '​​​​​reverb-default0',\n    label: 'R0',\n    audioProps: { ...reverb.defaultProps },\n    type: reverb.nodeType,\n  },\n  {\n    id: 'reverb-default1',\n    label: 'R1',\n    audioProps: { ...reverb.defaultProps },\n    type: reverb.nodeType,\n  },\n]\n\nexport default defaultNodes\n"},"/Users/kav/Dev/playground/gleetchy/src/state/globalPlayback/actions.ts":{"language":"typescript","mutants":[{"id":"541","location":{"end":{"column":3,"line":11},"start":{"column":84,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"542","location":{"end":{"column":2,"line":11},"start":{"column":91,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"543","location":{"end":{"column":32,"line":10},"start":{"column":9,"line":10}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"544","location":{"end":{"column":3,"line":15},"start":{"column":82,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"546","location":{"end":{"column":31,"line":14},"start":{"column":9,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"545","location":{"end":{"column":2,"line":15},"start":{"column":89,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"548","location":{"end":{"column":2,"line":30},"start":{"column":30,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"547","location":{"end":{"column":2,"line":30},"start":{"column":43,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"550","location":{"end":{"column":16,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"549","location":{"end":{"column":16,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"552","location":{"end":{"column":4,"line":29},"start":{"column":10,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"551","location":{"end":{"column":4,"line":27},"start":{"column":18,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"}],"source":"import { ActionCreator } from 'redux'\nimport { ThunkAction } from 'redux-thunk'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nimport { isPlayingSelector } from './selectors'\nimport { GlobalPlaybackStartAction, GlobalPlaybackStopAction } from './types'\n\nexport const startGlobalPlaybackAction: ActionCreator<GlobalPlaybackStartAction> = () => ({\n  type: 'GLOBAL_PLAYBACK_START',\n})\n\nexport const stopGlobalPlaybackAction: ActionCreator<GlobalPlaybackStopAction> = () => ({\n  type: 'GLOBAL_PLAYBACK_STOP',\n})\n\nexport const toggleGlobalPlaybackAction = (): ThunkAction<\n  void,\n  ApplicationState,\n  undefined,\n  GlobalPlaybackStartAction | GlobalPlaybackStopAction\n> => (dispatch, getState) => {\n  const isPlaying = isPlayingSelector(getState())\n\n  if (isPlaying) {\n    dispatch<GlobalPlaybackStopAction>(stopGlobalPlaybackAction())\n  } else {\n    dispatch<GlobalPlaybackStartAction>(startGlobalPlaybackAction())\n  }\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/state/globalPlayback/reducer.ts":{"language":"typescript","mutants":[{"id":"553","location":{"end":{"column":63,"line":9},"start":{"column":43,"line":9}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"554","location":{"end":{"column":61,"line":9},"start":{"column":56,"line":9}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"556","location":{"end":{"column":59,"line":17},"start":{"column":5,"line":16}},"mutatorName":"ConditionalExpression","replacement":"case 'GLOBAL_PLAYBACK_START':","status":"Survived"},{"id":"555","location":{"end":{"column":2,"line":23},"start":{"column":39,"line":14}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"557","location":{"end":{"column":33,"line":16},"start":{"column":10,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"558","location":{"end":{"column":59,"line":17},"start":{"column":40,"line":17}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"559","location":{"end":{"column":57,"line":17},"start":{"column":53,"line":17}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Survived"},{"id":"560","location":{"end":{"column":60,"line":19},"start":{"column":5,"line":18}},"mutatorName":"ConditionalExpression","replacement":"case 'GLOBAL_PLAYBACK_STOP':","status":"Survived"},{"id":"561","location":{"end":{"column":32,"line":18},"start":{"column":10,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"562","location":{"end":{"column":52,"line":19},"start":{"column":32,"line":19}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"563","location":{"end":{"column":50,"line":19},"start":{"column":45,"line":19}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"564","location":{"end":{"column":19,"line":21},"start":{"column":5,"line":20}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"}],"source":"import { Reducer } from 'redux'\n\nimport { GlobalPlaybackAction } from './types'\n\nexport interface GlobalPlaybackState {\n  isPlaying: boolean\n}\n\nconst defaultState: GlobalPlaybackState = { isPlaying: false }\n\nconst globalPlaybackReducer: Reducer<\n  GlobalPlaybackState,\n  GlobalPlaybackAction\n> = (state = defaultState, action) => {\n  switch (action.type) {\n    case 'GLOBAL_PLAYBACK_START':\n      return state.isPlaying ? state : { isPlaying: true }\n    case 'GLOBAL_PLAYBACK_STOP':\n      return state.isPlaying ? { isPlaying: false } : state\n    default:\n      return state\n  }\n}\n\nexport default globalPlaybackReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/globalPlayback/selectors.ts":{"language":"typescript","mutants":[{"id":"565","location":{"end":{"column":23,"line":7},"start":{"column":37,"line":6}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"566","location":{"end":{"column":19,"line":16},"start":{"column":8,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { identity, prop } from 'ramda'\nimport { createSelector } from 'reselect'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nconst globalPlaybackStateSelector = (state: ApplicationState) =>\n  state.globalPlayback\n\nexport const globalPlaybackSelector = createSelector(\n  globalPlaybackStateSelector,\n  identity,\n)\n\nexport const isPlayingSelector = createSelector(\n  globalPlaybackSelector,\n  prop('isPlaying'),\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useAudioNode.ts":{"language":"typescript","mutants":[{"id":"568","location":{"end":{"column":40,"line":25},"start":{"column":38,"line":25}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"},{"id":"567","location":{"end":{"column":2,"line":73},"start":{"column":6,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"569","location":{"end":{"column":75,"line":27},"start":{"column":73,"line":27}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"570","location":{"end":{"column":49,"line":28},"start":{"column":44,"line":28}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"572","location":{"end":{"column":4,"line":33},"start":{"column":73,"line":30}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"571","location":{"end":{"column":71,"line":30},"start":{"column":30,"line":30}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"573","location":{"end":{"column":64,"line":37},"start":{"column":5,"line":36}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"574","location":{"end":{"column":19,"line":38},"start":{"column":5,"line":38}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"575","location":{"end":{"column":71,"line":42},"start":{"column":5,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"577","location":{"end":{"column":4,"line":54},"start":{"column":19,"line":46}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"578","location":{"end":{"column":14,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"576","location":{"end":{"column":19,"line":43},"start":{"column":5,"line":43}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"579","location":{"end":{"column":14,"line":49},"start":{"column":9,"line":49}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"580","location":{"end":{"column":14,"line":49},"start":{"column":9,"line":49}},"mutatorName":"BooleanLiteral","replacement":"node","status":"Survived"},{"id":"581","location":{"end":{"column":66,"line":49},"start":{"column":32,"line":49}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"582","location":{"end":{"column":23,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"583","location":{"end":{"column":23,"line":50},"start":{"column":9,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"584","location":{"end":{"column":23,"line":50},"start":{"column":9,"line":50}},"mutatorName":"BooleanLiteral","replacement":"isValid(node)","status":"Survived"},{"id":"586","location":{"end":{"column":26,"line":54},"start":{"column":6,"line":54}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"585","location":{"end":{"column":74,"line":50},"start":{"column":41,"line":50}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"588","location":{"end":{"column":21,"line":58},"start":{"column":6,"line":58}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"587","location":{"end":{"column":4,"line":58},"start":{"column":19,"line":56}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"589","location":{"end":{"column":4,"line":62},"start":{"column":19,"line":60}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"590","location":{"end":{"column":26,"line":62},"start":{"column":6,"line":62}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"591","location":{"end":{"column":4,"line":72},"start":{"column":10,"line":64}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useCallback, useEffect, useState } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { AudioNodeState, AudioNodeConnection } from '~/types'\nimport {\n  updateAudioNodeAudioPropsAction,\n  updateAudioNodeLabelAction,\n  removeAudioNodeAction,\n} from '~/state/audioNodes/actions'\nimport { getConnectionsFor } from '~/util/audio'\n\nimport useAudioNodes from './useAudioNodes'\nimport useConnections from './useConnections'\n\nconst useAudioNode = <T>(\n  id: string,\n  isValid: (node: AudioNodeState) => boolean,\n  defaultAudioProps: T,\n) => {\n  const dispatch = useDispatch()\n\n  const { nodes, activeIds } = useAudioNodes()\n  const { connections: allConnections } = useConnections()\n\n  const [label, setLabel] = useState('')\n  const [audioProps, setAudioProps] = useState<T>(defaultAudioProps)\n  const [connections, setConnections] = useState<AudioNodeConnection[]>([])\n  const [isActive, setIsActive] = useState(false)\n\n  const remove = useCallback(() => dispatch(removeAudioNodeAction(id)), [\n    id,\n    dispatch,\n  ])\n\n  const updateAudioProps = useCallback(\n    (audioProps: Partial<T>) =>\n      dispatch(updateAudioNodeAudioPropsAction(id, audioProps)),\n    [id, dispatch],\n  )\n\n  const updateLabel = useCallback(\n    (label: string) => dispatch(updateAudioNodeLabelAction(id, label)),\n    [id, dispatch],\n  )\n\n  useEffect(() => {\n    const node = nodes[id]\n\n    if (!node) throw new Error(`Audio node not found at id ${id}`)\n    if (!isValid(node)) throw new Error(`Audio node is invalid for ${id}`)\n\n    setAudioProps(node.audioProps as any) // eslint-disable-line\n    setLabel(node.label)\n  }, [id, nodes, isValid])\n\n  useEffect(() => {\n    setIsActive(activeIds.includes(id))\n  }, [id, activeIds])\n\n  useEffect(() => {\n    setConnections(getConnectionsFor(id, allConnections))\n  }, [id, allConnections])\n\n  return {\n    label,\n    audioProps,\n    updateAudioProps,\n    updateLabel,\n    connections,\n    isActive,\n    remove,\n  }\n}\n\nexport default useAudioNode\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useAudioNodes.ts":{"language":"typescript","mutants":[{"id":"592","location":{"end":{"column":2,"line":22},"start":{"column":29,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"593","location":{"end":{"column":57,"line":17},"start":{"column":5,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"594","location":{"end":{"column":15,"line":18},"start":{"column":5,"line":18}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"595","location":{"end":{"column":35,"line":21},"start":{"column":10,"line":21}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport {\n  audioNodesSelector,\n  activeAudioNodeIdsSelector,\n} from '~/state/audioNodes/selectors'\nimport { addAudioNodeAction } from '~/state/audioNodes/actions'\n\nconst useAudioNodes = () => {\n  const dispatch = useDispatch()\n\n  const nodes = useSelector(audioNodesSelector)\n  const activeIds = useSelector(activeAudioNodeIdsSelector)\n\n  const add = useCallback(\n    (type: string) => dispatch(addAudioNodeAction(type)),\n    [dispatch],\n  )\n\n  return { nodes, activeIds, add }\n}\n\nexport default useAudioNodes\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useAudioNodesMeta.ts":{"language":"typescript","mutants":[{"id":"596","location":{"end":{"column":2,"line":14},"start":{"column":33,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"597","location":{"end":{"column":39,"line":13},"start":{"column":10,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useSelector } from 'react-redux'\nimport { equals } from 'ramda'\n\nimport {\n  immutableInstrumentsMetaSelector,\n  immutableAudioEffectsMetaSelector,\n} from '~/state/audioNodes/selectors'\n\nconst useAudioNodesMeta = () => {\n  const instruments = useSelector(immutableInstrumentsMetaSelector, equals)\n  const audioEffects = useSelector(immutableAudioEffectsMetaSelector, equals)\n\n  return { instruments, audioEffects }\n}\n\nexport default useAudioNodesMeta\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useConnections.ts":{"language":"typescript","mutants":[{"id":"598","location":{"end":{"column":2,"line":31},"start":{"column":30,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"599","location":{"end":{"column":49,"line":21},"start":{"column":5,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"600","location":{"end":{"column":15,"line":22},"start":{"column":5,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"601","location":{"end":{"column":4,"line":30},"start":{"column":10,"line":25}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { AudioNodeMeta } from '~/types'\nimport {\n  connectableSourcesSelector,\n  connectableTargetsSelector,\n} from '~/state/audioNodes/selectors'\nimport { connectionsSelector } from '~/state/connections/selectors'\nimport { toggleConnectionAction } from '~/state/connections/actions'\n\nconst useConnections = () => {\n  const dispatch = useDispatch()\n\n  const sources = useSelector(connectableSourcesSelector)\n  const targets = useSelector(connectableTargetsSelector)\n  const connections = useSelector(connectionsSelector)\n\n  const toggleConnection = useCallback(\n    ({ id: from }: AudioNodeMeta, { id: to }: AudioNodeMeta) =>\n      dispatch(toggleConnectionAction(from, to)),\n    [dispatch],\n  )\n\n  return {\n    connections,\n    sources,\n    targets,\n    toggleConnection,\n  }\n}\n\nexport default useConnections\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useGlobalPlayback.ts":{"language":"typescript","mutants":[{"id":"602","location":{"end":{"column":2,"line":18},"start":{"column":33,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"604","location":{"end":{"column":15,"line":14},"start":{"column":5,"line":14}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"603","location":{"end":{"column":49,"line":13},"start":{"column":5,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"605","location":{"end":{"column":39,"line":17},"start":{"column":10,"line":17}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { isPlayingSelector } from '~/state/globalPlayback/selectors'\nimport { toggleGlobalPlaybackAction } from '~/state/globalPlayback/actions'\n\nconst useGlobalPlayback = () => {\n  const dispatch = useDispatch()\n\n  const isPlaying = useSelector(isPlayingSelector)\n\n  const togglePlayback = useCallback(\n    () => dispatch(toggleGlobalPlaybackAction()),\n    [dispatch],\n  )\n\n  return { isPlaying, togglePlayback }\n}\n\nexport default useGlobalPlayback\n"},"/Users/kav/Dev/playground/gleetchy/src/state/hooks/useUITheme.ts":{"language":"typescript","mutants":[{"id":"607","location":{"end":{"column":76,"line":12},"start":{"column":35,"line":12}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"606","location":{"end":{"column":2,"line":17},"start":{"column":26,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"608","location":{"end":{"column":4,"line":14},"start":{"column":78,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"609","location":{"end":{"column":32,"line":16},"start":{"column":10,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"}],"source":"import { useCallback } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\n\nimport { uiThemeSelector } from '~/state/ui/selectors'\nimport { toggleDarkLightUIThemes } from '~/state/ui/actions'\n\nconst useUITheme = () => {\n  const dispatch = useDispatch()\n\n  const theme = useSelector(uiThemeSelector)\n\n  const toggleTheme = useCallback(() => dispatch(toggleDarkLightUIThemes()), [\n    dispatch,\n  ])\n\n  return { theme, toggleTheme }\n}\n\nexport default useUITheme\n"},"/Users/kav/Dev/playground/gleetchy/src/state/serialization.ts":{"language":"typescript","mutants":[{"id":"610","location":{"end":{"column":28,"line":6},"start":{"column":22,"line":5}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"612","location":{"end":{"column":28,"line":6},"start":{"column":3,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"611","location":{"end":{"column":28,"line":6},"start":{"column":3,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"613","location":{"end":{"column":19,"line":6},"start":{"column":16,"line":6}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"615","location":{"end":{"column":66,"line":9},"start":{"column":3,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"614","location":{"end":{"column":28,"line":6},"start":{"column":20,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"618","location":{"end":{"column":2,"line":16},"start":{"column":34,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"616","location":{"end":{"column":66,"line":9},"start":{"column":42,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"617","location":{"end":{"column":66,"line":9},"start":{"column":42,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"619","location":{"end":{"column":2,"line":38},"start":{"column":59,"line":18}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"620","location":{"end":{"column":31,"line":19},"start":{"column":7,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"621","location":{"end":{"column":31,"line":19},"start":{"column":7,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"622","location":{"end":{"column":4,"line":21},"start":{"column":33,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"623","location":{"end":{"column":28,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"625","location":{"end":{"column":4,"line":25},"start":{"column":30,"line":23}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"624","location":{"end":{"column":28,"line":23},"start":{"column":7,"line":23}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"626","location":{"end":{"column":27,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"628","location":{"end":{"column":4,"line":35},"start":{"column":29,"line":27}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"627","location":{"end":{"column":27,"line":27},"start":{"column":7,"line":27}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"629","location":{"end":{"column":31,"line":28},"start":{"column":18,"line":28}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"630","location":{"end":{"column":6,"line":32},"start":{"column":52,"line":30}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"631","location":{"end":{"column":75,"line":41},"start":{"column":32,"line":41}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"632","location":{"end":{"column":45,"line":41},"start":{"column":33,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"633","location":{"end":{"column":60,"line":41},"start":{"column":47,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"634","location":{"end":{"column":74,"line":41},"start":{"column":62,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"635","location":{"end":{"column":47,"line":43},"start":{"column":3,"line":42}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"636","location":{"end":{"column":76,"line":46},"start":{"column":28,"line":46}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { anyPass, curry, pick, pipe } from 'ramda'\n\nimport { ApplicationState } from '~/state/configureStore'\n\nconst isObjectLike = (value: unknown): value is { [key: string]: unknown } =>\n  typeof value === 'object'\n\nconst isInstanceOf = curry(\n  (ctor: Function, instance: unknown) => instance instanceof ctor,\n)\n\nconst isUnserializable = anyPass([\n  isInstanceOf(AudioBuffer),\n  isInstanceOf(ArrayBuffer),\n  isInstanceOf(Error),\n])\n\nconst unsetUnserializable = (struct: unknown): unknown => {\n  if (isUnserializable(struct)) {\n    return undefined\n  }\n\n  if (Array.isArray(struct)) {\n    return (struct as unknown[]).map(unsetUnserializable)\n  }\n\n  if (isObjectLike(struct)) {\n    const copy = { ...struct }\n\n    Object.entries(copy).forEach(([key, value]) => {\n      copy[key] = unsetUnserializable(value)\n    })\n\n    return copy\n  }\n\n  return struct\n}\n\nexport const serialize: (state: ApplicationState) => string = pipe(\n  pick<keyof ApplicationState>(['audioNodes', 'connections', 'audioFiles']),\n  (state: Partial<ApplicationState>) =>\n    JSON.stringify(unsetUnserializable(state)),\n)\n\nexport const deserialize = (stateString: string) => JSON.parse(stateString)\n"},"/Users/kav/Dev/playground/gleetchy/src/state/ui/actions.ts":{"language":"typescript","mutants":[{"id":"637","location":{"end":{"column":2,"line":20},"start":{"column":40,"line":7}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"638","location":{"end":{"column":2,"line":20},"start":{"column":30,"line":12}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"641","location":{"end":{"column":20,"line":15},"start":{"column":17,"line":15}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"639","location":{"end":{"column":27,"line":15},"start":{"column":7,"line":15}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"640","location":{"end":{"column":27,"line":15},"start":{"column":7,"line":15}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"642","location":{"end":{"column":27,"line":15},"start":{"column":21,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"643","location":{"end":{"column":4,"line":17},"start":{"column":29,"line":15}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"644","location":{"end":{"column":74,"line":16},"start":{"column":32,"line":16}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"646","location":{"end":{"column":72,"line":16},"start":{"column":58,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"645","location":{"end":{"column":50,"line":16},"start":{"column":43,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"647","location":{"end":{"column":4,"line":19},"start":{"column":10,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"648","location":{"end":{"column":73,"line":18},"start":{"column":32,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"649","location":{"end":{"column":49,"line":18},"start":{"column":43,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"650","location":{"end":{"column":71,"line":18},"start":{"column":57,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { ThunkAction } from 'redux-thunk'\n\nimport { ApplicationState } from '../configureStore'\nimport { UISetThemeAction } from './types'\nimport { uiThemeNameSelector } from './selectors'\n\nexport const toggleDarkLightUIThemes = (): ThunkAction<\n  void,\n  ApplicationState,\n  undefined,\n  UISetThemeAction\n> => (dispatch, getState) => {\n  const themeName = uiThemeNameSelector(getState())\n\n  if (themeName === 'dark') {\n    dispatch<UISetThemeAction>({ payload: 'light', type: 'UI_SET_THEME' })\n  } else {\n    dispatch<UISetThemeAction>({ payload: 'dark', type: 'UI_SET_THEME' })\n  }\n}\n"},"/Users/kav/Dev/playground/gleetchy/src/state/ui/reducer.ts":{"language":"typescript","mutants":[{"id":"651","location":{"end":{"column":2,"line":14},"start":{"column":31,"line":12}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"652","location":{"end":{"column":2,"line":28},"start":{"column":15,"line":19}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"655","location":{"end":{"column":8,"line":24},"start":{"column":52,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"654","location":{"end":{"column":24,"line":21},"start":{"column":10,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"653","location":{"end":{"column":9,"line":24},"start":{"column":5,"line":21}},"mutatorName":"ConditionalExpression","replacement":"case 'UI_SET_THEME':","status":"Survived"},{"id":"656","location":{"end":{"column":19,"line":26},"start":{"column":5,"line":25}},"mutatorName":"ConditionalExpression","replacement":"default:","status":"Survived"}],"source":"import produce from 'immer'\nimport { Reducer } from 'redux'\n\nimport defaultTheme, { ThemeName } from '~/style/theme'\n\nimport { UIAction } from './types'\n\nexport interface UIState {\n  currentThemeName: ThemeName\n}\n\nconst defaultState: UIState = {\n  currentThemeName: defaultTheme.name,\n}\n\nconst UIReducer: Reducer<UIState, UIAction> = (\n  state = defaultState,\n  action,\n): UIState => {\n  switch (action.type) {\n    case 'UI_SET_THEME':\n      return produce<UIState>(state, draftState => {\n        draftState.currentThemeName = action.payload\n      })\n    default:\n      return state\n  }\n}\n\nexport default UIReducer\n"},"/Users/kav/Dev/playground/gleetchy/src/state/ui/selectors.ts":{"language":"typescript","mutants":[{"id":"657","location":{"end":{"column":64,"line":10},"start":{"column":3,"line":9}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"658","location":{"end":{"column":64,"line":10},"start":{"column":5,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"660","location":{"end":{"column":54,"line":10},"start":{"column":52,"line":10}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"659","location":{"end":{"column":64,"line":10},"start":{"column":5,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"662","location":{"end":{"column":50,"line":10},"start":{"column":26,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"663","location":{"end":{"column":50,"line":10},"start":{"column":26,"line":10}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"661","location":{"end":{"column":50,"line":10},"start":{"column":17,"line":10}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"664","location":{"end":{"column":40,"line":10},"start":{"column":37,"line":10}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"665","location":{"end":{"column":62,"line":13},"start":{"column":25,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"666","location":{"end":{"column":45,"line":17},"start":{"column":3,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"667","location":{"end":{"column":22,"line":21},"start":{"column":68,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { createSelector } from 'reselect'\nimport { memoizeWith, identity } from 'ramda'\n\nimport { ApplicationState } from '~/state/configureStore'\nimport { themes, ThemeName } from '~/style/theme'\n\nconst getTheme = memoizeWith(\n  identity,\n  (themeName: ThemeName) =>\n    themes.find(theme => theme.name === themeName) || themes[0],\n)\n\nconst uiStateSelector = (state: ApplicationState) => state.ui\n\nexport const uiThemeNameSelector = createSelector(\n  uiStateSelector,\n  ({ currentThemeName }) => currentThemeName,\n)\n\nexport const uiThemeSelector = createSelector(uiThemeNameSelector, themeName =>\n  getTheme(themeName),\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/style/color.ts":{"language":"typescript","mutants":[{"id":"668","location":{"end":{"column":2,"line":10},"start":{"column":32,"line":1}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"670","location":{"end":{"column":14,"line":3},"start":{"column":11,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"671","location":{"end":{"column":13,"line":4},"start":{"column":10,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"669","location":{"end":{"column":14,"line":2},"start":{"column":11,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"673","location":{"end":{"column":19,"line":6},"start":{"column":16,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"672","location":{"end":{"column":12,"line":5},"start":{"column":9,"line":5}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"674","location":{"end":{"column":21,"line":7},"start":{"column":18,"line":7}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"675","location":{"end":{"column":22,"line":8},"start":{"column":19,"line":8}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"676","location":{"end":{"column":20,"line":9},"start":{"column":17,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"678","location":{"end":{"column":12,"line":13},"start":{"column":3,"line":13}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"677","location":{"end":{"column":2,"line":46},"start":{"column":30,"line":12}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"679","location":{"end":{"column":12,"line":14},"start":{"column":3,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"681","location":{"end":{"column":12,"line":16},"start":{"column":3,"line":16}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"680","location":{"end":{"column":12,"line":15},"start":{"column":3,"line":15}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"682","location":{"end":{"column":12,"line":17},"start":{"column":3,"line":17}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"683","location":{"end":{"column":12,"line":18},"start":{"column":3,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"684","location":{"end":{"column":12,"line":19},"start":{"column":3,"line":19}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"687","location":{"end":{"column":12,"line":22},"start":{"column":3,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"686","location":{"end":{"column":12,"line":21},"start":{"column":3,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"685","location":{"end":{"column":12,"line":20},"start":{"column":3,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"688","location":{"end":{"column":12,"line":23},"start":{"column":3,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"689","location":{"end":{"column":12,"line":24},"start":{"column":3,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"690","location":{"end":{"column":12,"line":25},"start":{"column":3,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"691","location":{"end":{"column":12,"line":26},"start":{"column":3,"line":26}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"692","location":{"end":{"column":12,"line":27},"start":{"column":3,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"694","location":{"end":{"column":12,"line":29},"start":{"column":3,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"693","location":{"end":{"column":12,"line":28},"start":{"column":3,"line":28}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"695","location":{"end":{"column":12,"line":30},"start":{"column":3,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"696","location":{"end":{"column":12,"line":31},"start":{"column":3,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"698","location":{"end":{"column":12,"line":33},"start":{"column":3,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"697","location":{"end":{"column":12,"line":32},"start":{"column":3,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"699","location":{"end":{"column":12,"line":34},"start":{"column":3,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"700","location":{"end":{"column":12,"line":35},"start":{"column":3,"line":35}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"702","location":{"end":{"column":12,"line":37},"start":{"column":3,"line":37}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"701","location":{"end":{"column":12,"line":36},"start":{"column":3,"line":36}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"703","location":{"end":{"column":12,"line":38},"start":{"column":3,"line":38}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"704","location":{"end":{"column":12,"line":39},"start":{"column":3,"line":39}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"706","location":{"end":{"column":12,"line":41},"start":{"column":3,"line":41}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"705","location":{"end":{"column":12,"line":40},"start":{"column":3,"line":40}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"708","location":{"end":{"column":12,"line":43},"start":{"column":3,"line":43}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"707","location":{"end":{"column":12,"line":42},"start":{"column":3,"line":42}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"710","location":{"end":{"column":12,"line":45},"start":{"column":3,"line":45}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"709","location":{"end":{"column":12,"line":44},"start":{"column":3,"line":44}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"711","location":{"end":{"column":47,"line":46},"start":{"column":8,"line":46}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"712","location":{"end":{"column":45,"line":46},"start":{"column":44,"line":46}},"mutatorName":"ArithmeticOperator","replacement":"+","status":"Survived"},{"id":"713","location":{"end":{"column":40,"line":46},"start":{"column":39,"line":46}},"mutatorName":"ArithmeticOperator","replacement":"/","status":"Survived"}],"source":"export const asciiBlockFills = {\n  sparse: '░',\n  medium: '▒',\n  dense: '▓',\n  full: '█',\n  fullTopHalf: '▀',\n  fullRightHalf: '▐',\n  fullBottomHalf: '▄',\n  fullLeftHalf: '▌',\n}\n\nexport const nodeColorPool = [\n  '#6994d0',\n  '#b7cce8',\n  '#b7cce8',\n  '#b9dba4',\n  '#9dcc80',\n  '#81bd5c',\n  '#f6ca38',\n  '#f8d769',\n  '#fae49a',\n  '#f6c696',\n  '#f2ac67',\n  '#ee9238',\n  '#e63a37',\n  '#ec6764',\n  '#f29491',\n  '#cda1ca',\n  '#bb80b7',\n  '#a95fa4',\n  '#db7194',\n  '#e59ab3',\n  '#efc3d2',\n  '#93586f',\n  '#51489d',\n  '#9b3333',\n  '#9e6627',\n  '#d1592f',\n  '#fab599',\n  '#a5c4ad',\n  '#748978',\n  '#698755',\n  '#42668e',\n  '#12739e',\n  '#96d0e2',\n].sort(() => Math.floor(Math.random() * 3) - 1)\n"},"/Users/kav/Dev/playground/gleetchy/src/style/layout.ts":{"language":"typescript","mutants":[{"id":"714","location":{"end":{"column":2,"line":9},"start":{"column":39,"line":3}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"715","location":{"end":{"column":23,"line":4},"start":{"column":13,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { css } from '@emotion/core'\n\nexport const layoutAbsoluteFill = css({\n  position: 'absolute',\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n})\n"},"/Users/kav/Dev/playground/gleetchy/src/style/theme.ts":{"language":"typescript","mutants":[{"id":"716","location":{"end":{"column":2,"line":15},"start":{"column":43,"line":13}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"718","location":{"end":{"column":2,"line":36},"start":{"column":34,"line":17}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"719","location":{"end":{"column":4,"line":26},"start":{"column":3,"line":18}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"717","location":{"end":{"column":60,"line":14},"start":{"column":13,"line":14}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"722","location":{"end":{"column":25,"line":22},"start":{"column":16,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"720","location":{"end":{"column":17,"line":20},"start":{"column":11,"line":20}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"721","location":{"end":{"column":25,"line":21},"start":{"column":16,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"724","location":{"end":{"column":28,"line":24},"start":{"column":19,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"723","location":{"end":{"column":26,"line":23},"start":{"column":20,"line":23}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"725","location":{"end":{"column":26,"line":25},"start":{"column":17,"line":25}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"727","location":{"end":{"column":18,"line":29},"start":{"column":11,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"726","location":{"end":{"column":4,"line":35},"start":{"column":3,"line":27}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Survived"},{"id":"728","location":{"end":{"column":22,"line":30},"start":{"column":16,"line":30}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"729","location":{"end":{"column":22,"line":31},"start":{"column":16,"line":31}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"730","location":{"end":{"column":26,"line":32},"start":{"column":20,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"732","location":{"end":{"column":26,"line":34},"start":{"column":17,"line":34}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"731","location":{"end":{"column":28,"line":33},"start":{"column":19,"line":33}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"export type ThemeName = 'dark' | 'light'\n\nexport interface UITheme {\n  name: ThemeName\n  colorPage: string\n  colorBody: string\n  colorEmphasis: string\n  colorKeyline: string\n  colorError: string\n  fontBody: string\n}\n\nconst common: Pick<UITheme, 'fontBody'> = {\n  fontBody: '-apple-system, BlinkMacSystemFont, sans-serif',\n}\n\nexport const themes: UITheme[] = [\n  {\n    ...common,\n    name: 'dark',\n    colorPage: '#101010',\n    colorBody: '#c8c8c8',\n    colorEmphasis: '#fff',\n    colorKeyline: '#195555',\n    colorError: '#ec6764',\n  },\n  {\n    ...common,\n    name: 'light',\n    colorPage: '#fff',\n    colorBody: '#222',\n    colorEmphasis: '#000',\n    colorKeyline: '#e8e8e8',\n    colorError: '#ec6764',\n  },\n]\n\nexport default themes[0]\n"},"/Users/kav/Dev/playground/gleetchy/src/util/audio.ts":{"language":"typescript","mutants":[{"id":"733","location":{"end":{"column":51,"line":6},"start":{"column":23,"line":5}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"734","location":{"end":{"column":46,"line":6},"start":{"column":40,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"735","location":{"end":{"column":79,"line":16},"start":{"column":3,"line":15}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"736","location":{"end":{"column":79,"line":16},"start":{"column":5,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"738","location":{"end":{"column":45,"line":16},"start":{"column":43,"line":16}},"mutatorName":"LogicalOperator","replacement":"||","status":"Survived"},{"id":"739","location":{"end":{"column":42,"line":16},"start":{"column":5,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"740","location":{"end":{"column":42,"line":16},"start":{"column":5,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"737","location":{"end":{"column":79,"line":16},"start":{"column":5,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"741","location":{"end":{"column":25,"line":16},"start":{"column":22,"line":16}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"743","location":{"end":{"column":79,"line":16},"start":{"column":46,"line":16}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"742","location":{"end":{"column":79,"line":16},"start":{"column":46,"line":16}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"744","location":{"end":{"column":64,"line":16},"start":{"column":61,"line":16}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"745","location":{"end":{"column":67,"line":21},"start":{"column":3,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"746","location":{"end":{"column":66,"line":21},"start":{"column":24,"line":21}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"747","location":{"end":{"column":66,"line":21},"start":{"column":42,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"748","location":{"end":{"column":66,"line":21},"start":{"column":42,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"749","location":{"end":{"column":56,"line":21},"start":{"column":54,"line":21}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"750","location":{"end":{"column":53,"line":21},"start":{"column":42,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"751","location":{"end":{"column":53,"line":21},"start":{"column":42,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"753","location":{"end":{"column":66,"line":21},"start":{"column":57,"line":21}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"752","location":{"end":{"column":50,"line":21},"start":{"column":47,"line":21}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"754","location":{"end":{"column":66,"line":21},"start":{"column":57,"line":21}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"755","location":{"end":{"column":63,"line":21},"start":{"column":60,"line":21}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Killed"},{"id":"756","location":{"end":{"column":4,"line":42},"start":{"column":64,"line":25}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"757","location":{"end":{"column":28,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"759","location":{"end":{"column":28,"line":26},"start":{"column":9,"line":26}},"mutatorName":"BooleanLiteral","replacement":"connections.length","status":"Killed"},{"id":"758","location":{"end":{"column":28,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"760","location":{"end":{"column":42,"line":26},"start":{"column":37,"line":26}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"761","location":{"end":{"column":6,"line":39},"start":{"column":73,"line":28}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"762","location":{"end":{"column":65,"line":29},"start":{"column":59,"line":29}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"763","location":{"end":{"column":36,"line":31},"start":{"column":11,"line":31}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"764","location":{"end":{"column":36,"line":31},"start":{"column":11,"line":31}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"765","location":{"end":{"column":36,"line":31},"start":{"column":11,"line":31}},"mutatorName":"BooleanLiteral","replacement":"connectionsFromId.length","status":"Killed"},{"id":"767","location":{"end":{"column":53,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"766","location":{"end":{"column":50,"line":31},"start":{"column":45,"line":31}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"771","location":{"end":{"column":60,"line":36},"start":{"column":9,"line":35}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"769","location":{"end":{"column":45,"line":32},"start":{"column":41,"line":32}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"770","location":{"end":{"column":66,"line":32},"start":{"column":62,"line":32}},"mutatorName":"BooleanLiteral","replacement":"false","status":"Killed"},{"id":"768","location":{"end":{"column":53,"line":32},"start":{"column":11,"line":32}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"772","location":{"end":{"column":60,"line":36},"start":{"column":11,"line":36}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"773","location":{"end":{"column":60,"line":36},"start":{"column":11,"line":36}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"774","location":{"end":{"column":19,"line":36},"start":{"column":17,"line":36}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Killed"},{"id":"775","location":{"end":{"column":14,"line":37},"start":{"column":9,"line":37}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Killed"},{"id":"778","location":{"end":{"column":70,"line":50},"start":{"column":8,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"779","location":{"end":{"column":26,"line":50},"start":{"column":24,"line":50}},"mutatorName":"LogicalOperator","replacement":"||","status":"Killed"},{"id":"777","location":{"end":{"column":70,"line":50},"start":{"column":8,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"776","location":{"end":{"column":70,"line":50},"start":{"column":3,"line":46}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"780","location":{"end":{"column":23,"line":50},"start":{"column":8,"line":50}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"781","location":{"end":{"column":23,"line":50},"start":{"column":8,"line":50}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"782","location":{"end":{"column":18,"line":50},"start":{"column":15,"line":50}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"783","location":{"end":{"column":70,"line":50},"start":{"column":27,"line":50}},"mutatorName":"BooleanLiteral","replacement":"hasConnectionTo(connections, fromId, toId)","status":"Killed"},{"id":"784","location":{"end":{"column":56,"line":58},"start":{"column":3,"line":54}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"785","location":{"end":{"column":54,"line":58},"start":{"column":42,"line":58}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"import { curry, F, propEq, propSatisfies, test, tryCatch } from 'ramda'\n\nimport { AudioNodeConnection, AudioNodeMeta } from '~/types'\n\nconst typeSatisfies = (pred: (type: string) => boolean) =>\n  tryCatch(propSatisfies<string>(pred, 'type'), F)\n\nexport const isAudioEffect = typeSatisfies(test(/^audio_effect_/i))\n\nexport const isInstrument = typeSatisfies(test(/^instrument_/i))\n\ntype Connection = Omit<AudioNodeConnection, 'color'>\n\nexport const isSameConnection = curry(\n  (connection1: Connection, connection2: Connection) =>\n    connection1.from === connection2.from && connection1.to === connection2.to,\n)\n\nexport const getConnectionsFor = curry(\n  (id: string, connections: AudioNodeConnection[]): AudioNodeConnection[] =>\n    connections.filter(({ from, to }) => from === id || to === id),\n)\n\nexport const hasConnectionTo = curry(\n  (connections: Connection[], toId: string, fromId: string) => {\n    if (!connections.length) return false\n\n    const checkDownstreamConnection = (innerFromId: string): boolean => {\n      const connectionsFromId = connections.filter(propEq('from', innerFromId))\n\n      if (!connectionsFromId.length) return false\n      if (connectionsFromId.some(propEq('to', toId))) return true\n\n      return connectionsFromId.reduce(\n        (accum: boolean, connection) =>\n          accum || checkDownstreamConnection(connection.to),\n        false,\n      )\n    }\n\n    return checkDownstreamConnection(fromId)\n  },\n)\n\nexport const canConnectNodes = curry(\n  (\n    connections: Connection[],\n    { id: fromId }: Pick<AudioNodeMeta, 'id'>,\n    { id: toId }: Pick<AudioNodeMeta, 'id'>,\n  ) => fromId !== toId && !hasConnectionTo(connections, fromId, toId),\n)\n\nexport const getConnectionBetween = curry(\n  (\n    connections: AudioNodeConnection[],\n    { id: from }: Pick<AudioNodeMeta, 'id'>,\n    { id: to }: Pick<AudioNodeMeta, 'id'>,\n  ) => connections.find(isSameConnection({ from, to })),\n)\n"},"/Users/kav/Dev/playground/gleetchy/src/util/connection.ts":{"language":"typescript","mutants":[{"id":"786","location":{"end":{"column":4,"line":14},"start":{"column":23,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"787","location":{"end":{"column":4,"line":14},"start":{"column":65,"line":4}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"788","location":{"end":{"column":34,"line":7},"start":{"column":9,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"789","location":{"end":{"column":34,"line":7},"start":{"column":9,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"790","location":{"end":{"column":6,"line":9},"start":{"column":36,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"791","location":{"end":{"column":52,"line":9},"start":{"column":16,"line":9}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"792","location":{"end":{"column":52,"line":9},"start":{"column":16,"line":9}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"793","location":{"end":{"column":41,"line":9},"start":{"column":38,"line":9}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"794","location":{"end":{"column":52,"line":9},"start":{"column":42,"line":9}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"795","location":{"end":{"column":6,"line":11},"start":{"column":54,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"796","location":{"end":{"column":6,"line":13},"start":{"column":12,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"797","location":{"end":{"column":50,"line":12},"start":{"column":23,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"798","location":{"end":{"column":4,"line":29},"start":{"column":26,"line":16}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"799","location":{"end":{"column":4,"line":29},"start":{"column":68,"line":17}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"800","location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"801","location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"803","location":{"end":{"column":6,"line":22},"start":{"column":16,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"802","location":{"end":{"column":14,"line":20},"start":{"column":9,"line":20}},"mutatorName":"BooleanLiteral","replacement":"node","status":"Survived"},{"id":"804","location":{"end":{"column":41,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"805","location":{"end":{"column":41,"line":22},"start":{"column":16,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"806","location":{"end":{"column":6,"line":24},"start":{"column":43,"line":22}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"807","location":{"end":{"column":52,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"808","location":{"end":{"column":52,"line":24},"start":{"column":16,"line":24}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"810","location":{"end":{"column":52,"line":24},"start":{"column":42,"line":24}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"809","location":{"end":{"column":41,"line":24},"start":{"column":38,"line":24}},"mutatorName":"EqualityOperator","replacement":"!==","status":"Survived"},{"id":"811","location":{"end":{"column":6,"line":26},"start":{"column":54,"line":24}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"812","location":{"end":{"column":6,"line":28},"start":{"column":12,"line":26}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"813","location":{"end":{"column":50,"line":27},"start":{"column":23,"line":27}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"814","location":{"end":{"column":5,"line":45},"start":{"column":28,"line":31}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"815","location":{"end":{"column":5,"line":45},"start":{"column":31,"line":39}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"816","location":{"end":{"column":4,"line":45},"start":{"column":22,"line":40}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"import { AudioNodeConnectableProxy, AudioNodeReturn, GAudioNode } from '~/types'\n\nconst createConnect = (getOutNode: AudioNodeReturn) =>\n  function connect(node: AudioNode | AudioNodeConnectableProxy) {\n    const outNode = getOutNode()\n\n    if (node instanceof AudioNode) {\n      outNode.connect(node)\n    } else if (typeof node.getInNode === 'function') {\n      outNode.connect(node.getInNode())\n    } else {\n      throw new Error('Unable to connect to node')\n    }\n  }\n\nconst createDisconnect = (getOutNode: AudioNodeReturn) =>\n  function disconnect(node: AudioNode | AudioNodeConnectableProxy) {\n    const outNode = getOutNode()\n\n    if (!node) {\n      outNode.disconnect()\n    } else if (node instanceof AudioNode) {\n      outNode.disconnect(node)\n    } else if (typeof node.getInNode === 'function') {\n      outNode.disconnect(node.getInNode())\n    } else {\n      throw new Error('Unable to disconnect node')\n    }\n  }\n\nexport const connectable = <\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  P extends object = any,\n  N extends GAudioNode = GAudioNode<P, string>\n>({\n  getInNode,\n  getOutNode,\n}: // eslint-disable-next-line @typescript-eslint/no-explicit-any\nAudioNodeConnectableProxy) => (api: any): N =>\n  Object.assign(api, {\n    connect: createConnect(getOutNode),\n    disconnect: createDisconnect(getOutNode),\n    getInNode,\n    getOutNode,\n  })\n"},"/Users/kav/Dev/playground/gleetchy/src/util/dev.ts":{"language":"typescript","mutants":[{"id":"817","location":{"end":{"column":52,"line":4},"start":{"column":15,"line":4}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"818","location":{"end":{"column":52,"line":4},"start":{"column":15,"line":4}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"819","location":{"end":{"column":39,"line":4},"start":{"column":36,"line":4}},"mutatorName":"EqualityOperator","replacement":"===","status":"Survived"},{"id":"820","location":{"end":{"column":52,"line":4},"start":{"column":40,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"/* eslint-disable no-console */\nimport { noop } from './function'\n\nconst isDev = process.env.NODE_ENV !== 'production'\nconst cLog = console.log.bind(console)\nconst cWarn = console.warn.bind(console)\nconst cError = console.error.bind(console)\n\nexport const log = isDev ? cLog : noop\nexport const warn = isDev ? cWarn : noop\nexport const error = isDev ? cError : noop\nexport const prodLog = cLog\nexport const prodWarn = cWarn\nexport const prodError = cError\n"},"/Users/kav/Dev/playground/gleetchy/src/util/env.ts":{"language":"typescript","mutants":[{"id":"821","location":{"end":{"column":59,"line":5},"start":{"column":57,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"824","location":{"end":{"column":47,"line":6},"start":{"column":18,"line":6}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"823","location":{"end":{"column":47,"line":6},"start":{"column":18,"line":6}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"822","location":{"end":{"column":2,"line":15},"start":{"column":64,"line":5}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"825","location":{"end":{"column":35,"line":6},"start":{"column":32,"line":6}},"mutatorName":"EqualityOperator","replacement":"===","status":"Killed"},{"id":"826","location":{"end":{"column":47,"line":6},"start":{"column":36,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"827","location":{"end":{"column":14,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"828","location":{"end":{"column":14,"line":8},"start":{"column":7,"line":8}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"829","location":{"end":{"column":14,"line":8},"start":{"column":7,"line":8}},"mutatorName":"BooleanLiteral","replacement":"WINDOW","status":"Killed"},{"id":"830","location":{"end":{"column":4,"line":10},"start":{"column":16,"line":8}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"832","location":{"end":{"column":47,"line":18},"start":{"column":21,"line":17}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"831","location":{"end":{"column":35,"line":12},"start":{"column":32,"line":12}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"833","location":{"end":{"column":23,"line":18},"start":{"column":19,"line":18}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"834","location":{"end":{"column":2,"line":28},"start":{"column":44,"line":20}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"835","location":{"end":{"column":45,"line":21},"start":{"column":41,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"836","location":{"end":{"column":67,"line":21},"start":{"column":56,"line":21}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"837","location":{"end":{"column":64,"line":22},"start":{"column":36,"line":22}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Survived"},{"id":"838","location":{"end":{"column":63,"line":22},"start":{"column":37,"line":22}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Killed"},{"id":"840","location":{"end":{"column":57,"line":26},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"839","location":{"end":{"column":57,"line":26},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"841","location":{"end":{"column":42,"line":25},"start":{"column":40,"line":25}},"mutatorName":"LogicalOperator","replacement":"&&","status":"Survived"},{"id":"842","location":{"end":{"column":39,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"843","location":{"end":{"column":39,"line":25},"start":{"column":7,"line":25}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"844","location":{"end":{"column":57,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Survived"},{"id":"845","location":{"end":{"column":57,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"847","location":{"end":{"column":4,"line":36},"start":{"column":38,"line":30}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"846","location":{"end":{"column":12,"line":27},"start":{"column":7,"line":27}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"848","location":{"end":{"column":6,"line":35},"start":{"column":48,"line":32}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"849","location":{"end":{"column":33,"line":33},"start":{"column":11,"line":33}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"851","location":{"end":{"column":10,"line":35},"start":{"column":8,"line":35}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"850","location":{"end":{"column":33,"line":33},"start":{"column":11,"line":33}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"}],"source":"import { path, pipe, split, uniq, __ } from 'ramda'\n\nimport { isNotNil } from './object'\n\nexport const requireWindowWith = (propPaths: string[] = []) => {\n  const WINDOW = typeof window !== 'undefined' ? window : undefined\n\n  if (!WINDOW) {\n    return undefined\n  }\n\n  const windowHas = pipe(split('.'), path(__, WINDOW), isNotNil)\n\n  return propPaths.every(windowHas) ? WINDOW : undefined\n}\n\nconst asEventName = (name: string) =>\n  name.startsWith('on') ? name.slice(2) : name\n\nconst isSupportedEvent = (name: string) => {\n  const asHandlerName = name.startsWith('on') ? name : `on${name}`\n  const WINDOW = requireWindowWith(['document.documentElement'])\n\n  return WINDOW\n    ? asHandlerName in WINDOW.document ||\n        asHandlerName in WINDOW.document.documentElement\n    : false\n}\n\nexport const filterSupportedEvents = (eventNames: string[]) =>\n  uniq(\n    eventNames.reduce((acc: string[], name) => {\n      if (isSupportedEvent(name)) acc.push(asEventName(name))\n      return acc\n    }, []),\n  )\n"},"/Users/kav/Dev/playground/gleetchy/src/util/event.ts":{"language":"typescript","mutants":[{"id":"852","location":{"end":{"column":2,"line":6},"start":{"column":46,"line":1}},"mutatorName":"BlockStatement","replacement":"{}","status":"Survived"},{"id":"853","location":{"end":{"column":15,"line":5},"start":{"column":10,"line":5}},"mutatorName":"BooleanLiteral","replacement":"true","status":"Survived"},{"id":"854","location":{"end":{"column":33,"line":9},"start":{"column":33,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"export const cancelEvent = (event: Event) => {\n  event.preventDefault()\n  event.stopPropagation()\n\n  return false\n}\n\nexport const cancelReactEvent = <T extends { nativeEvent: Event }>(event: T) =>\n  cancelEvent(event.nativeEvent)\n"},"/Users/kav/Dev/playground/gleetchy/src/util/id.ts":{"language":"typescript","mutants":[{"id":"856","location":{"end":{"column":68,"line":3},"start":{"column":27,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"857","location":{"end":{"column":68,"line":3},"start":{"column":47,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"}],"source":"import { slug } from 'cuid'\n\nexport const prefixedId = (prefix: string) => `${prefix}-${slug()}`\n"},"/Users/kav/Dev/playground/gleetchy/src/util/function.ts":{"language":"typescript","mutants":[{"id":"855","location":{"end":{"column":41,"line":7},"start":{"column":39,"line":7}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Survived"}],"source":"import { always } from 'ramda'\n\n// Ramda doesn't include this but it does have utility\n// see: https://github.com/ramda/ramda/issues/701\nexport const noop = always(undefined)\n\nexport const stubEmptyString = always('')\n"},"/Users/kav/Dev/playground/gleetchy/src/util/object.ts":{"language":"typescript","mutants":[{"id":"858","location":{"end":{"column":25,"line":4},"start":{"column":31,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"import { pick, isNil, pipe, not } from 'ramda'\n\nexport const pickObjectKeys = (obj: { [key: string]: unknown }) =>\n  pick(Object.keys(obj))\n\nexport const isNotNil = pipe(isNil, not)\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};